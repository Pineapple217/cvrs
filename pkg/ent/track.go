// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pineapple217/cvrs/pkg/ent/release"
	"github.com/Pineapple217/cvrs/pkg/ent/track"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// Track is the model entity for the Track schema.
type Track struct {
	config `json:"-"`
	// ID of the ent.
	ID pid.ID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrackQuery when eager-loading is set.
	Edges          TrackEdges `json:"edges"`
	release_tracks *pid.ID
	selectValues   sql.SelectValues
}

// TrackEdges holds the relations/edges for other nodes in the graph.
type TrackEdges struct {
	// AppearingArtists holds the value of the appearing_artists edge.
	AppearingArtists []*Artist `json:"appearing_artists,omitempty"`
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// Appearance holds the value of the appearance edge.
	Appearance []*TrackAppearance `json:"appearance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AppearingArtistsOrErr returns the AppearingArtists value or an error if the edge
// was not loaded in eager-loading.
func (e TrackEdges) AppearingArtistsOrErr() ([]*Artist, error) {
	if e.loadedTypes[0] {
		return e.AppearingArtists, nil
	}
	return nil, &NotLoadedError{edge: "appearing_artists"}
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrackEdges) ReleaseOrErr() (*Release, error) {
	if e.Release != nil {
		return e.Release, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: release.Label}
	}
	return nil, &NotLoadedError{edge: "release"}
}

// AppearanceOrErr returns the Appearance value or an error if the edge
// was not loaded in eager-loading.
func (e TrackEdges) AppearanceOrErr() ([]*TrackAppearance, error) {
	if e.loadedTypes[2] {
		return e.Appearance, nil
	}
	return nil, &NotLoadedError{edge: "appearance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Track) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case track.FieldID:
			values[i] = new(sql.NullInt64)
		case track.FieldTitle:
			values[i] = new(sql.NullString)
		case track.ForeignKeys[0]: // release_tracks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Track fields.
func (t *Track) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case track.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = pid.ID(value.Int64)
			}
		case track.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case track.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field release_tracks", values[i])
			} else if value.Valid {
				t.release_tracks = new(pid.ID)
				*t.release_tracks = pid.ID(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Track.
// This includes values selected through modifiers, order, etc.
func (t *Track) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryAppearingArtists queries the "appearing_artists" edge of the Track entity.
func (t *Track) QueryAppearingArtists() *ArtistQuery {
	return NewTrackClient(t.config).QueryAppearingArtists(t)
}

// QueryRelease queries the "release" edge of the Track entity.
func (t *Track) QueryRelease() *ReleaseQuery {
	return NewTrackClient(t.config).QueryRelease(t)
}

// QueryAppearance queries the "appearance" edge of the Track entity.
func (t *Track) QueryAppearance() *TrackAppearanceQuery {
	return NewTrackClient(t.config).QueryAppearance(t)
}

// Update returns a builder for updating this Track.
// Note that you need to call Track.Unwrap() before calling this method if this Track
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Track) Update() *TrackUpdateOne {
	return NewTrackClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Track entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Track) Unwrap() *Track {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Track is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Track) String() string {
	var builder strings.Builder
	builder.WriteString("Track(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteByte(')')
	return builder.String()
}

// Tracks is a parsable slice of Track.
type Tracks []*Track
