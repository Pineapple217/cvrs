// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pineapple217/cvrs/pkg/ent/artist"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/imagedata"
	"github.com/Pineapple217/cvrs/pkg/ent/release"
	"github.com/Pineapple217/cvrs/pkg/ent/user"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// Image is the model entity for the Image schema.
type Image struct {
	config `json:"-"`
	// ID of the ent.
	ID pid.ID `json:"id,omitempty"`
	// File holds the value of the "file" field.
	File string `json:"file,omitempty"`
	// OriginalName holds the value of the "original_name" field.
	OriginalName string `json:"original_name,omitempty"`
	// Type holds the value of the "type" field.
	Type image.Type `json:"type,omitempty"`
	// Note holds the value of the "note" field.
	Note *string `json:"note,omitempty"`
	// DimentionWidth holds the value of the "dimention_width" field.
	DimentionWidth int `json:"dimention_width,omitempty"`
	// DimentionHeight holds the value of the "dimention_height" field.
	DimentionHeight int `json:"dimention_height,omitempty"`
	// SizeBits holds the value of the "size_bits" field.
	SizeBits uint32 `json:"size_bits,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitzero"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitzero"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitzero"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageQuery when eager-loading is set.
	Edges         ImageEdges `json:"edges"`
	artist_image  *pid.ID
	image_data    *int
	release_image *pid.ID
	user_images   *pid.ID
	selectValues  sql.SelectValues
}

// ImageEdges holds the relations/edges for other nodes in the graph.
type ImageEdges struct {
	// Release holds the value of the release edge.
	Release *Release `json:"release,omitempty"`
	// Artist holds the value of the artist edge.
	Artist *Artist `json:"artist,omitempty"`
	// Uploader holds the value of the uploader edge.
	Uploader *User `json:"uploader,omitempty"`
	// ProccesedImage holds the value of the proccesed_image edge.
	ProccesedImage []*ProcessedImage `json:"proccesed_image,omitempty"`
	// Data holds the value of the data edge.
	Data *ImageData `json:"data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ReleaseOrErr returns the Release value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) ReleaseOrErr() (*Release, error) {
	if e.Release != nil {
		return e.Release, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: release.Label}
	}
	return nil, &NotLoadedError{edge: "release"}
}

// ArtistOrErr returns the Artist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) ArtistOrErr() (*Artist, error) {
	if e.Artist != nil {
		return e.Artist, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: artist.Label}
	}
	return nil, &NotLoadedError{edge: "artist"}
}

// UploaderOrErr returns the Uploader value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) UploaderOrErr() (*User, error) {
	if e.Uploader != nil {
		return e.Uploader, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "uploader"}
}

// ProccesedImageOrErr returns the ProccesedImage value or an error if the edge
// was not loaded in eager-loading.
func (e ImageEdges) ProccesedImageOrErr() ([]*ProcessedImage, error) {
	if e.loadedTypes[3] {
		return e.ProccesedImage, nil
	}
	return nil, &NotLoadedError{edge: "proccesed_image"}
}

// DataOrErr returns the Data value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageEdges) DataOrErr() (*ImageData, error) {
	if e.Data != nil {
		return e.Data, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: imagedata.Label}
	}
	return nil, &NotLoadedError{edge: "data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Image) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case image.FieldID, image.FieldDimentionWidth, image.FieldDimentionHeight, image.FieldSizeBits:
			values[i] = new(sql.NullInt64)
		case image.FieldFile, image.FieldOriginalName, image.FieldType, image.FieldNote:
			values[i] = new(sql.NullString)
		case image.FieldCreatedAt, image.FieldUpdatedAt, image.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case image.ForeignKeys[0]: // artist_image
			values[i] = new(sql.NullInt64)
		case image.ForeignKeys[1]: // image_data
			values[i] = new(sql.NullInt64)
		case image.ForeignKeys[2]: // release_image
			values[i] = new(sql.NullInt64)
		case image.ForeignKeys[3]: // user_images
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Image fields.
func (i *Image) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case image.FieldID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = pid.ID(value.Int64)
			}
		case image.FieldFile:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file", values[j])
			} else if value.Valid {
				i.File = value.String
			}
		case image.FieldOriginalName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_name", values[j])
			} else if value.Valid {
				i.OriginalName = value.String
			}
		case image.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = image.Type(value.String)
			}
		case image.FieldNote:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[j])
			} else if value.Valid {
				i.Note = new(string)
				*i.Note = value.String
			}
		case image.FieldDimentionWidth:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dimention_width", values[j])
			} else if value.Valid {
				i.DimentionWidth = int(value.Int64)
			}
		case image.FieldDimentionHeight:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dimention_height", values[j])
			} else if value.Valid {
				i.DimentionHeight = int(value.Int64)
			}
		case image.FieldSizeBits:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_bits", values[j])
			} else if value.Valid {
				i.SizeBits = uint32(value.Int64)
			}
		case image.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case image.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case image.FieldDeletedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[j])
			} else if value.Valid {
				i.DeletedAt = new(time.Time)
				*i.DeletedAt = value.Time
			}
		case image.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field artist_image", values[j])
			} else if value.Valid {
				i.artist_image = new(pid.ID)
				*i.artist_image = pid.ID(value.Int64)
			}
		case image.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field image_data", value)
			} else if value.Valid {
				i.image_data = new(int)
				*i.image_data = int(value.Int64)
			}
		case image.ForeignKeys[2]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field release_image", values[j])
			} else if value.Valid {
				i.release_image = new(pid.ID)
				*i.release_image = pid.ID(value.Int64)
			}
		case image.ForeignKeys[3]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_images", values[j])
			} else if value.Valid {
				i.user_images = new(pid.ID)
				*i.user_images = pid.ID(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Image.
// This includes values selected through modifiers, order, etc.
func (i *Image) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryRelease queries the "release" edge of the Image entity.
func (i *Image) QueryRelease() *ReleaseQuery {
	return NewImageClient(i.config).QueryRelease(i)
}

// QueryArtist queries the "artist" edge of the Image entity.
func (i *Image) QueryArtist() *ArtistQuery {
	return NewImageClient(i.config).QueryArtist(i)
}

// QueryUploader queries the "uploader" edge of the Image entity.
func (i *Image) QueryUploader() *UserQuery {
	return NewImageClient(i.config).QueryUploader(i)
}

// QueryProccesedImage queries the "proccesed_image" edge of the Image entity.
func (i *Image) QueryProccesedImage() *ProcessedImageQuery {
	return NewImageClient(i.config).QueryProccesedImage(i)
}

// QueryData queries the "data" edge of the Image entity.
func (i *Image) QueryData() *ImageDataQuery {
	return NewImageClient(i.config).QueryData(i)
}

// Update returns a builder for updating this Image.
// Note that you need to call Image.Unwrap() before calling this method if this Image
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Image) Update() *ImageUpdateOne {
	return NewImageClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Image entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Image) Unwrap() *Image {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Image is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Image) String() string {
	var builder strings.Builder
	builder.WriteString("Image(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("file=")
	builder.WriteString(i.File)
	builder.WriteString(", ")
	builder.WriteString("original_name=")
	builder.WriteString(i.OriginalName)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", i.Type))
	builder.WriteString(", ")
	if v := i.Note; v != nil {
		builder.WriteString("note=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("dimention_width=")
	builder.WriteString(fmt.Sprintf("%v", i.DimentionWidth))
	builder.WriteString(", ")
	builder.WriteString("dimention_height=")
	builder.WriteString(fmt.Sprintf("%v", i.DimentionHeight))
	builder.WriteString(", ")
	builder.WriteString("size_bits=")
	builder.WriteString(fmt.Sprintf("%v", i.SizeBits))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := i.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Images is a parsable slice of Image.
type Images []*Image
