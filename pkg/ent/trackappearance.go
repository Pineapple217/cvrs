// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pineapple217/cvrs/pkg/ent/artist"
	"github.com/Pineapple217/cvrs/pkg/ent/track"
	"github.com/Pineapple217/cvrs/pkg/ent/trackappearance"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// TrackAppearance is the model entity for the TrackAppearance schema.
type TrackAppearance struct {
	config `json:"-"`
	// TrackID holds the value of the "track_id" field.
	TrackID pid.ID `json:"track_id,omitempty"`
	// ArtistID holds the value of the "artist_id" field.
	ArtistID pid.ID `json:"artist_id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrackAppearanceQuery when eager-loading is set.
	Edges        TrackAppearanceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrackAppearanceEdges holds the relations/edges for other nodes in the graph.
type TrackAppearanceEdges struct {
	// Artist holds the value of the artist edge.
	Artist *Artist `json:"artist,omitempty"`
	// Track holds the value of the track edge.
	Track *Track `json:"track,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ArtistOrErr returns the Artist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrackAppearanceEdges) ArtistOrErr() (*Artist, error) {
	if e.Artist != nil {
		return e.Artist, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: artist.Label}
	}
	return nil, &NotLoadedError{edge: "artist"}
}

// TrackOrErr returns the Track value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrackAppearanceEdges) TrackOrErr() (*Track, error) {
	if e.Track != nil {
		return e.Track, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: track.Label}
	}
	return nil, &NotLoadedError{edge: "track"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrackAppearance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trackappearance.FieldTrackID, trackappearance.FieldArtistID, trackappearance.FieldOrder:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrackAppearance fields.
func (ta *TrackAppearance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trackappearance.FieldTrackID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field track_id", values[i])
			} else if value.Valid {
				ta.TrackID = pid.ID(value.Int64)
			}
		case trackappearance.FieldArtistID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field artist_id", values[i])
			} else if value.Valid {
				ta.ArtistID = pid.ID(value.Int64)
			}
		case trackappearance.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				ta.Order = int(value.Int64)
			}
		default:
			ta.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrackAppearance.
// This includes values selected through modifiers, order, etc.
func (ta *TrackAppearance) Value(name string) (ent.Value, error) {
	return ta.selectValues.Get(name)
}

// QueryArtist queries the "artist" edge of the TrackAppearance entity.
func (ta *TrackAppearance) QueryArtist() *ArtistQuery {
	return NewTrackAppearanceClient(ta.config).QueryArtist(ta)
}

// QueryTrack queries the "track" edge of the TrackAppearance entity.
func (ta *TrackAppearance) QueryTrack() *TrackQuery {
	return NewTrackAppearanceClient(ta.config).QueryTrack(ta)
}

// Update returns a builder for updating this TrackAppearance.
// Note that you need to call TrackAppearance.Unwrap() before calling this method if this TrackAppearance
// was returned from a transaction, and the transaction was committed or rolled back.
func (ta *TrackAppearance) Update() *TrackAppearanceUpdateOne {
	return NewTrackAppearanceClient(ta.config).UpdateOne(ta)
}

// Unwrap unwraps the TrackAppearance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ta *TrackAppearance) Unwrap() *TrackAppearance {
	_tx, ok := ta.config.driver.(*txDriver)
	if !ok {
		panic("ent: TrackAppearance is not a transactional entity")
	}
	ta.config.driver = _tx.drv
	return ta
}

// String implements the fmt.Stringer.
func (ta *TrackAppearance) String() string {
	var builder strings.Builder
	builder.WriteString("TrackAppearance(")
	builder.WriteString("track_id=")
	builder.WriteString(fmt.Sprintf("%v", ta.TrackID))
	builder.WriteString(", ")
	builder.WriteString("artist_id=")
	builder.WriteString(fmt.Sprintf("%v", ta.ArtistID))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", ta.Order))
	builder.WriteByte(')')
	return builder.String()
}

// TrackAppearances is a parsable slice of TrackAppearance.
type TrackAppearances []*TrackAppearance
