// Code generated by ent, DO NOT EDIT.

package artist

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ID filters vertices based on their ID field.
func ID(id pid.ID) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pid.ID) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pid.ID) predicate.Artist {
	return predicate.Artist(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pid.ID) predicate.Artist {
	return predicate.Artist(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pid.ID) predicate.Artist {
	return predicate.Artist(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pid.ID) predicate.Artist {
	return predicate.Artist(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pid.ID) predicate.Artist {
	return predicate.Artist(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pid.ID) predicate.Artist {
	return predicate.Artist(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pid.ID) predicate.Artist {
	return predicate.Artist(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldName, v))
}

// Did applies equality check predicate on the "did" field. It's identical to DidEQ.
func Did(v int64) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldDid, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Artist {
	return predicate.Artist(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Artist {
	return predicate.Artist(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Artist {
	return predicate.Artist(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Artist {
	return predicate.Artist(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Artist {
	return predicate.Artist(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Artist {
	return predicate.Artist(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Artist {
	return predicate.Artist(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Artist {
	return predicate.Artist(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Artist {
	return predicate.Artist(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Artist {
	return predicate.Artist(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Artist {
	return predicate.Artist(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Artist {
	return predicate.Artist(sql.FieldContainsFold(FieldName, v))
}

// DidEQ applies the EQ predicate on the "did" field.
func DidEQ(v int64) predicate.Artist {
	return predicate.Artist(sql.FieldEQ(FieldDid, v))
}

// DidNEQ applies the NEQ predicate on the "did" field.
func DidNEQ(v int64) predicate.Artist {
	return predicate.Artist(sql.FieldNEQ(FieldDid, v))
}

// DidIn applies the In predicate on the "did" field.
func DidIn(vs ...int64) predicate.Artist {
	return predicate.Artist(sql.FieldIn(FieldDid, vs...))
}

// DidNotIn applies the NotIn predicate on the "did" field.
func DidNotIn(vs ...int64) predicate.Artist {
	return predicate.Artist(sql.FieldNotIn(FieldDid, vs...))
}

// DidGT applies the GT predicate on the "did" field.
func DidGT(v int64) predicate.Artist {
	return predicate.Artist(sql.FieldGT(FieldDid, v))
}

// DidGTE applies the GTE predicate on the "did" field.
func DidGTE(v int64) predicate.Artist {
	return predicate.Artist(sql.FieldGTE(FieldDid, v))
}

// DidLT applies the LT predicate on the "did" field.
func DidLT(v int64) predicate.Artist {
	return predicate.Artist(sql.FieldLT(FieldDid, v))
}

// DidLTE applies the LTE predicate on the "did" field.
func DidLTE(v int64) predicate.Artist {
	return predicate.Artist(sql.FieldLTE(FieldDid, v))
}

// DidIsNil applies the IsNil predicate on the "did" field.
func DidIsNil() predicate.Artist {
	return predicate.Artist(sql.FieldIsNull(FieldDid))
}

// DidNotNil applies the NotNil predicate on the "did" field.
func DidNotNil() predicate.Artist {
	return predicate.Artist(sql.FieldNotNull(FieldDid))
}

// HasAppearingTracks applies the HasEdge predicate on the "appearing_tracks" edge.
func HasAppearingTracks() predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AppearingTracksTable, AppearingTracksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppearingTracksWith applies the HasEdge predicate on the "appearing_tracks" edge with a given conditions (other predicates).
func HasAppearingTracksWith(preds ...predicate.Track) predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := newAppearingTracksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppearingReleases applies the HasEdge predicate on the "appearing_releases" edge.
func HasAppearingReleases() predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AppearingReleasesTable, AppearingReleasesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppearingReleasesWith applies the HasEdge predicate on the "appearing_releases" edge with a given conditions (other predicates).
func HasAppearingReleasesWith(preds ...predicate.Release) predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := newAppearingReleasesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrackAppearance applies the HasEdge predicate on the "track_appearance" edge.
func HasTrackAppearance() predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TrackAppearanceTable, TrackAppearanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrackAppearanceWith applies the HasEdge predicate on the "track_appearance" edge with a given conditions (other predicates).
func HasTrackAppearanceWith(preds ...predicate.TrackAppearance) predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := newTrackAppearanceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReleaseAppearance applies the HasEdge predicate on the "release_appearance" edge.
func HasReleaseAppearance() predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReleaseAppearanceTable, ReleaseAppearanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReleaseAppearanceWith applies the HasEdge predicate on the "release_appearance" edge with a given conditions (other predicates).
func HasReleaseAppearanceWith(preds ...predicate.ReleaseAppearance) predicate.Artist {
	return predicate.Artist(func(s *sql.Selector) {
		step := newReleaseAppearanceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Artist) predicate.Artist {
	return predicate.Artist(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Artist) predicate.Artist {
	return predicate.Artist(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Artist) predicate.Artist {
	return predicate.Artist(sql.NotPredicates(p))
}
