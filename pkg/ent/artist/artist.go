// Code generated by ent, DO NOT EDIT.

package artist

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

const (
	// Label holds the string label denoting the artist type in the database.
	Label = "artist"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDid holds the string denoting the did field in the database.
	FieldDid = "did"
	// EdgeAppearingTracks holds the string denoting the appearing_tracks edge name in mutations.
	EdgeAppearingTracks = "appearing_tracks"
	// EdgeAppearingReleases holds the string denoting the appearing_releases edge name in mutations.
	EdgeAppearingReleases = "appearing_releases"
	// EdgeTrackAppearance holds the string denoting the track_appearance edge name in mutations.
	EdgeTrackAppearance = "track_appearance"
	// EdgeReleaseAppearance holds the string denoting the release_appearance edge name in mutations.
	EdgeReleaseAppearance = "release_appearance"
	// Table holds the table name of the artist in the database.
	Table = "artists"
	// AppearingTracksTable is the table that holds the appearing_tracks relation/edge. The primary key declared below.
	AppearingTracksTable = "track_appearances"
	// AppearingTracksInverseTable is the table name for the Track entity.
	// It exists in this package in order to avoid circular dependency with the "track" package.
	AppearingTracksInverseTable = "tracks"
	// AppearingReleasesTable is the table that holds the appearing_releases relation/edge. The primary key declared below.
	AppearingReleasesTable = "release_appearances"
	// AppearingReleasesInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	AppearingReleasesInverseTable = "releases"
	// TrackAppearanceTable is the table that holds the track_appearance relation/edge.
	TrackAppearanceTable = "track_appearances"
	// TrackAppearanceInverseTable is the table name for the TrackAppearance entity.
	// It exists in this package in order to avoid circular dependency with the "trackappearance" package.
	TrackAppearanceInverseTable = "track_appearances"
	// TrackAppearanceColumn is the table column denoting the track_appearance relation/edge.
	TrackAppearanceColumn = "artist_id"
	// ReleaseAppearanceTable is the table that holds the release_appearance relation/edge.
	ReleaseAppearanceTable = "release_appearances"
	// ReleaseAppearanceInverseTable is the table name for the ReleaseAppearance entity.
	// It exists in this package in order to avoid circular dependency with the "releaseappearance" package.
	ReleaseAppearanceInverseTable = "release_appearances"
	// ReleaseAppearanceColumn is the table column denoting the release_appearance relation/edge.
	ReleaseAppearanceColumn = "artist_id"
)

// Columns holds all SQL columns for artist fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDid,
}

var (
	// AppearingTracksPrimaryKey and AppearingTracksColumn2 are the table columns denoting the
	// primary key for the appearing_tracks relation (M2M).
	AppearingTracksPrimaryKey = []string{"artist_id", "track_id"}
	// AppearingReleasesPrimaryKey and AppearingReleasesColumn2 are the table columns denoting the
	// primary key for the appearing_releases relation (M2M).
	AppearingReleasesPrimaryKey = []string{"artist_id", "release_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pid.ID
)

// OrderOption defines the ordering options for the Artist queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDid orders the results by the did field.
func ByDid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDid, opts...).ToFunc()
}

// ByAppearingTracksCount orders the results by appearing_tracks count.
func ByAppearingTracksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppearingTracksStep(), opts...)
	}
}

// ByAppearingTracks orders the results by appearing_tracks terms.
func ByAppearingTracks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppearingTracksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAppearingReleasesCount orders the results by appearing_releases count.
func ByAppearingReleasesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppearingReleasesStep(), opts...)
	}
}

// ByAppearingReleases orders the results by appearing_releases terms.
func ByAppearingReleases(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppearingReleasesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrackAppearanceCount orders the results by track_appearance count.
func ByTrackAppearanceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrackAppearanceStep(), opts...)
	}
}

// ByTrackAppearance orders the results by track_appearance terms.
func ByTrackAppearance(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrackAppearanceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReleaseAppearanceCount orders the results by release_appearance count.
func ByReleaseAppearanceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReleaseAppearanceStep(), opts...)
	}
}

// ByReleaseAppearance orders the results by release_appearance terms.
func ByReleaseAppearance(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReleaseAppearanceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAppearingTracksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppearingTracksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AppearingTracksTable, AppearingTracksPrimaryKey...),
	)
}
func newAppearingReleasesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppearingReleasesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AppearingReleasesTable, AppearingReleasesPrimaryKey...),
	)
}
func newTrackAppearanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrackAppearanceInverseTable, TrackAppearanceColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, TrackAppearanceTable, TrackAppearanceColumn),
	)
}
func newReleaseAppearanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReleaseAppearanceInverseTable, ReleaseAppearanceColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ReleaseAppearanceTable, ReleaseAppearanceColumn),
	)
}
