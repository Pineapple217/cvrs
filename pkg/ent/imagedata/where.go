// Code generated by ent, DO NOT EDIT.

package imagedata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLTE(FieldID, id))
}

// AvrR applies equality check predicate on the "avr_r" field. It's identical to AvrREQ.
func AvrR(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvrR, v))
}

// AvrG applies equality check predicate on the "avr_g" field. It's identical to AvrGEQ.
func AvrG(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvrG, v))
}

// AvrB applies equality check predicate on the "avr_b" field. It's identical to AvrBEQ.
func AvrB(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvrB, v))
}

// AvgBrightness applies equality check predicate on the "avg_brightness" field. It's identical to AvgBrightnessEQ.
func AvgBrightness(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvgBrightness, v))
}

// AvgSaturation applies equality check predicate on the "avg_saturation" field. It's identical to AvgSaturationEQ.
func AvgSaturation(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvgSaturation, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldCreatedAt, v))
}

// AvrREQ applies the EQ predicate on the "avr_r" field.
func AvrREQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvrR, v))
}

// AvrRNEQ applies the NEQ predicate on the "avr_r" field.
func AvrRNEQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNEQ(FieldAvrR, v))
}

// AvrRIn applies the In predicate on the "avr_r" field.
func AvrRIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldIn(FieldAvrR, vs...))
}

// AvrRNotIn applies the NotIn predicate on the "avr_r" field.
func AvrRNotIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNotIn(FieldAvrR, vs...))
}

// AvrRGT applies the GT predicate on the "avr_r" field.
func AvrRGT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGT(FieldAvrR, v))
}

// AvrRGTE applies the GTE predicate on the "avr_r" field.
func AvrRGTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGTE(FieldAvrR, v))
}

// AvrRLT applies the LT predicate on the "avr_r" field.
func AvrRLT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLT(FieldAvrR, v))
}

// AvrRLTE applies the LTE predicate on the "avr_r" field.
func AvrRLTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLTE(FieldAvrR, v))
}

// AvrGEQ applies the EQ predicate on the "avr_g" field.
func AvrGEQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvrG, v))
}

// AvrGNEQ applies the NEQ predicate on the "avr_g" field.
func AvrGNEQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNEQ(FieldAvrG, v))
}

// AvrGIn applies the In predicate on the "avr_g" field.
func AvrGIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldIn(FieldAvrG, vs...))
}

// AvrGNotIn applies the NotIn predicate on the "avr_g" field.
func AvrGNotIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNotIn(FieldAvrG, vs...))
}

// AvrGGT applies the GT predicate on the "avr_g" field.
func AvrGGT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGT(FieldAvrG, v))
}

// AvrGGTE applies the GTE predicate on the "avr_g" field.
func AvrGGTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGTE(FieldAvrG, v))
}

// AvrGLT applies the LT predicate on the "avr_g" field.
func AvrGLT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLT(FieldAvrG, v))
}

// AvrGLTE applies the LTE predicate on the "avr_g" field.
func AvrGLTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLTE(FieldAvrG, v))
}

// AvrBEQ applies the EQ predicate on the "avr_b" field.
func AvrBEQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvrB, v))
}

// AvrBNEQ applies the NEQ predicate on the "avr_b" field.
func AvrBNEQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNEQ(FieldAvrB, v))
}

// AvrBIn applies the In predicate on the "avr_b" field.
func AvrBIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldIn(FieldAvrB, vs...))
}

// AvrBNotIn applies the NotIn predicate on the "avr_b" field.
func AvrBNotIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNotIn(FieldAvrB, vs...))
}

// AvrBGT applies the GT predicate on the "avr_b" field.
func AvrBGT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGT(FieldAvrB, v))
}

// AvrBGTE applies the GTE predicate on the "avr_b" field.
func AvrBGTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGTE(FieldAvrB, v))
}

// AvrBLT applies the LT predicate on the "avr_b" field.
func AvrBLT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLT(FieldAvrB, v))
}

// AvrBLTE applies the LTE predicate on the "avr_b" field.
func AvrBLTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLTE(FieldAvrB, v))
}

// AvgBrightnessEQ applies the EQ predicate on the "avg_brightness" field.
func AvgBrightnessEQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvgBrightness, v))
}

// AvgBrightnessNEQ applies the NEQ predicate on the "avg_brightness" field.
func AvgBrightnessNEQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNEQ(FieldAvgBrightness, v))
}

// AvgBrightnessIn applies the In predicate on the "avg_brightness" field.
func AvgBrightnessIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldIn(FieldAvgBrightness, vs...))
}

// AvgBrightnessNotIn applies the NotIn predicate on the "avg_brightness" field.
func AvgBrightnessNotIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNotIn(FieldAvgBrightness, vs...))
}

// AvgBrightnessGT applies the GT predicate on the "avg_brightness" field.
func AvgBrightnessGT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGT(FieldAvgBrightness, v))
}

// AvgBrightnessGTE applies the GTE predicate on the "avg_brightness" field.
func AvgBrightnessGTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGTE(FieldAvgBrightness, v))
}

// AvgBrightnessLT applies the LT predicate on the "avg_brightness" field.
func AvgBrightnessLT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLT(FieldAvgBrightness, v))
}

// AvgBrightnessLTE applies the LTE predicate on the "avg_brightness" field.
func AvgBrightnessLTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLTE(FieldAvgBrightness, v))
}

// AvgSaturationEQ applies the EQ predicate on the "avg_saturation" field.
func AvgSaturationEQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldAvgSaturation, v))
}

// AvgSaturationNEQ applies the NEQ predicate on the "avg_saturation" field.
func AvgSaturationNEQ(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNEQ(FieldAvgSaturation, v))
}

// AvgSaturationIn applies the In predicate on the "avg_saturation" field.
func AvgSaturationIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldIn(FieldAvgSaturation, vs...))
}

// AvgSaturationNotIn applies the NotIn predicate on the "avg_saturation" field.
func AvgSaturationNotIn(vs ...int) predicate.ImageData {
	return predicate.ImageData(sql.FieldNotIn(FieldAvgSaturation, vs...))
}

// AvgSaturationGT applies the GT predicate on the "avg_saturation" field.
func AvgSaturationGT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGT(FieldAvgSaturation, v))
}

// AvgSaturationGTE applies the GTE predicate on the "avg_saturation" field.
func AvgSaturationGTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldGTE(FieldAvgSaturation, v))
}

// AvgSaturationLT applies the LT predicate on the "avg_saturation" field.
func AvgSaturationLT(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLT(FieldAvgSaturation, v))
}

// AvgSaturationLTE applies the LTE predicate on the "avg_saturation" field.
func AvgSaturationLTE(v int) predicate.ImageData {
	return predicate.ImageData(sql.FieldLTE(FieldAvgSaturation, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ImageData {
	return predicate.ImageData(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ImageData {
	return predicate.ImageData(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ImageData {
	return predicate.ImageData(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ImageData {
	return predicate.ImageData(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ImageData {
	return predicate.ImageData(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ImageData {
	return predicate.ImageData(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ImageData {
	return predicate.ImageData(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ImageData {
	return predicate.ImageData(sql.FieldLTE(FieldCreatedAt, v))
}

// HasImage applies the HasEdge predicate on the "image" edge.
func HasImage() predicate.ImageData {
	return predicate.ImageData(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ImageTable, ImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImageWith applies the HasEdge predicate on the "image" edge with a given conditions (other predicates).
func HasImageWith(preds ...predicate.Image) predicate.ImageData {
	return predicate.ImageData(func(s *sql.Selector) {
		step := newImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ImageData) predicate.ImageData {
	return predicate.ImageData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ImageData) predicate.ImageData {
	return predicate.ImageData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ImageData) predicate.ImageData {
	return predicate.ImageData(sql.NotPredicates(p))
}
