// Code generated by ent, DO NOT EDIT.

package imagedata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the imagedata type in the database.
	Label = "image_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAvrR holds the string denoting the avr_r field in the database.
	FieldAvrR = "avr_r"
	// FieldAvrG holds the string denoting the avr_g field in the database.
	FieldAvrG = "avr_g"
	// FieldAvrB holds the string denoting the avr_b field in the database.
	FieldAvrB = "avr_b"
	// FieldAvgBrightness holds the string denoting the avg_brightness field in the database.
	FieldAvgBrightness = "avg_brightness"
	// FieldAvgSaturation holds the string denoting the avg_saturation field in the database.
	FieldAvgSaturation = "avg_saturation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeImage holds the string denoting the image edge name in mutations.
	EdgeImage = "image"
	// Table holds the table name of the imagedata in the database.
	Table = "image_data"
	// ImageTable is the table that holds the image relation/edge.
	ImageTable = "images"
	// ImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImageInverseTable = "images"
	// ImageColumn is the table column denoting the image relation/edge.
	ImageColumn = "image_data"
)

// Columns holds all SQL columns for imagedata fields.
var Columns = []string{
	FieldID,
	FieldAvrR,
	FieldAvrG,
	FieldAvrB,
	FieldAvgBrightness,
	FieldAvgSaturation,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ImageData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAvrR orders the results by the avr_r field.
func ByAvrR(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvrR, opts...).ToFunc()
}

// ByAvrG orders the results by the avr_g field.
func ByAvrG(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvrG, opts...).ToFunc()
}

// ByAvrB orders the results by the avr_b field.
func ByAvrB(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvrB, opts...).ToFunc()
}

// ByAvgBrightness orders the results by the avg_brightness field.
func ByAvgBrightness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgBrightness, opts...).ToFunc()
}

// ByAvgSaturation orders the results by the avg_saturation field.
func ByAvgSaturation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvgSaturation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByImageCount orders the results by image count.
func ByImageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImageStep(), opts...)
	}
}

// ByImage orders the results by image terms.
func ByImage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ImageTable, ImageColumn),
	)
}
