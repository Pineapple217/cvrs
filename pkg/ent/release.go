// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/release"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// Release is the model entity for the Release schema.
type Release struct {
	config `json:"-"`
	// ID of the ent.
	ID pid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type release.Type `json:"type,omitempty"`
	// ReleaseDate holds the value of the "release_date" field.
	ReleaseDate time.Time `json:"release_date,omitzero"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReleaseQuery when eager-loading is set.
	Edges        ReleaseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReleaseEdges holds the relations/edges for other nodes in the graph.
type ReleaseEdges struct {
	// Image holds the value of the image edge.
	Image *Image `json:"image,omitempty"`
	// Tracks holds the value of the tracks edge.
	Tracks []*Track `json:"tracks,omitempty"`
	// AppearingArtists holds the value of the appearing_artists edge.
	AppearingArtists []*Artist `json:"appearing_artists,omitempty"`
	// ReleaseAppearance holds the value of the release_appearance edge.
	ReleaseAppearance []*ReleaseAppearance `json:"release_appearance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReleaseEdges) ImageOrErr() (*Image, error) {
	if e.Image != nil {
		return e.Image, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: image.Label}
	}
	return nil, &NotLoadedError{edge: "image"}
}

// TracksOrErr returns the Tracks value or an error if the edge
// was not loaded in eager-loading.
func (e ReleaseEdges) TracksOrErr() ([]*Track, error) {
	if e.loadedTypes[1] {
		return e.Tracks, nil
	}
	return nil, &NotLoadedError{edge: "tracks"}
}

// AppearingArtistsOrErr returns the AppearingArtists value or an error if the edge
// was not loaded in eager-loading.
func (e ReleaseEdges) AppearingArtistsOrErr() ([]*Artist, error) {
	if e.loadedTypes[2] {
		return e.AppearingArtists, nil
	}
	return nil, &NotLoadedError{edge: "appearing_artists"}
}

// ReleaseAppearanceOrErr returns the ReleaseAppearance value or an error if the edge
// was not loaded in eager-loading.
func (e ReleaseEdges) ReleaseAppearanceOrErr() ([]*ReleaseAppearance, error) {
	if e.loadedTypes[3] {
		return e.ReleaseAppearance, nil
	}
	return nil, &NotLoadedError{edge: "release_appearance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Release) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case release.FieldID:
			values[i] = new(sql.NullInt64)
		case release.FieldName, release.FieldType:
			values[i] = new(sql.NullString)
		case release.FieldReleaseDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Release fields.
func (r *Release) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case release.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = pid.ID(value.Int64)
			}
		case release.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case release.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = release.Type(value.String)
			}
		case release.FieldReleaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field release_date", values[i])
			} else if value.Valid {
				r.ReleaseDate = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Release.
// This includes values selected through modifiers, order, etc.
func (r *Release) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryImage queries the "image" edge of the Release entity.
func (r *Release) QueryImage() *ImageQuery {
	return NewReleaseClient(r.config).QueryImage(r)
}

// QueryTracks queries the "tracks" edge of the Release entity.
func (r *Release) QueryTracks() *TrackQuery {
	return NewReleaseClient(r.config).QueryTracks(r)
}

// QueryAppearingArtists queries the "appearing_artists" edge of the Release entity.
func (r *Release) QueryAppearingArtists() *ArtistQuery {
	return NewReleaseClient(r.config).QueryAppearingArtists(r)
}

// QueryReleaseAppearance queries the "release_appearance" edge of the Release entity.
func (r *Release) QueryReleaseAppearance() *ReleaseAppearanceQuery {
	return NewReleaseClient(r.config).QueryReleaseAppearance(r)
}

// Update returns a builder for updating this Release.
// Note that you need to call Release.Unwrap() before calling this method if this Release
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Release) Update() *ReleaseUpdateOne {
	return NewReleaseClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Release entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Release) Unwrap() *Release {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Release is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Release) String() string {
	var builder strings.Builder
	builder.WriteString("Release(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	builder.WriteString("release_date=")
	builder.WriteString(r.ReleaseDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Releases is a parsable slice of Release.
type Releases []*Release
