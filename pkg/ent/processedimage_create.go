// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/processedimage"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ProcessedImageCreate is the builder for creating a ProcessedImage entity.
type ProcessedImageCreate struct {
	config
	mutation *ProcessedImageMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (pic *ProcessedImageCreate) SetType(pr processedimage.Type) *ProcessedImageCreate {
	pic.mutation.SetType(pr)
	return pic
}

// SetDimentions sets the "dimentions" field.
func (pic *ProcessedImageCreate) SetDimentions(i int) *ProcessedImageCreate {
	pic.mutation.SetDimentions(i)
	return pic
}

// SetSizeBits sets the "size_bits" field.
func (pic *ProcessedImageCreate) SetSizeBits(u uint32) *ProcessedImageCreate {
	pic.mutation.SetSizeBits(u)
	return pic
}

// SetThumb sets the "thumb" field.
func (pic *ProcessedImageCreate) SetThumb(b []byte) *ProcessedImageCreate {
	pic.mutation.SetThumb(b)
	return pic
}

// SetCreatedAt sets the "created_at" field.
func (pic *ProcessedImageCreate) SetCreatedAt(t time.Time) *ProcessedImageCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *ProcessedImageCreate) SetNillableCreatedAt(t *time.Time) *ProcessedImageCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedAt sets the "updated_at" field.
func (pic *ProcessedImageCreate) SetUpdatedAt(t time.Time) *ProcessedImageCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pic *ProcessedImageCreate) SetNillableUpdatedAt(t *time.Time) *ProcessedImageCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetDeletedAt sets the "deleted_at" field.
func (pic *ProcessedImageCreate) SetDeletedAt(t time.Time) *ProcessedImageCreate {
	pic.mutation.SetDeletedAt(t)
	return pic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pic *ProcessedImageCreate) SetNillableDeletedAt(t *time.Time) *ProcessedImageCreate {
	if t != nil {
		pic.SetDeletedAt(*t)
	}
	return pic
}

// SetID sets the "id" field.
func (pic *ProcessedImageCreate) SetID(pi pid.ID) *ProcessedImageCreate {
	pic.mutation.SetID(pi)
	return pic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pic *ProcessedImageCreate) SetNillableID(pi *pid.ID) *ProcessedImageCreate {
	if pi != nil {
		pic.SetID(*pi)
	}
	return pic
}

// SetSourceID sets the "source" edge to the Image entity by ID.
func (pic *ProcessedImageCreate) SetSourceID(id pid.ID) *ProcessedImageCreate {
	pic.mutation.SetSourceID(id)
	return pic
}

// SetSource sets the "source" edge to the Image entity.
func (pic *ProcessedImageCreate) SetSource(i *Image) *ProcessedImageCreate {
	return pic.SetSourceID(i.ID)
}

// Mutation returns the ProcessedImageMutation object of the builder.
func (pic *ProcessedImageCreate) Mutation() *ProcessedImageMutation {
	return pic.mutation
}

// Save creates the ProcessedImage in the database.
func (pic *ProcessedImageCreate) Save(ctx context.Context) (*ProcessedImage, error) {
	pic.defaults()
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProcessedImageCreate) SaveX(ctx context.Context) *ProcessedImage {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProcessedImageCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProcessedImageCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *ProcessedImageCreate) defaults() {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := processedimage.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		v := processedimage.DefaultUpdatedAt()
		pic.mutation.SetUpdatedAt(v)
	}
	if _, ok := pic.mutation.ID(); !ok {
		v := processedimage.DefaultID()
		pic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProcessedImageCreate) check() error {
	if _, ok := pic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ProcessedImage.type"`)}
	}
	if v, ok := pic.mutation.GetType(); ok {
		if err := processedimage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProcessedImage.type": %w`, err)}
		}
	}
	if _, ok := pic.mutation.Dimentions(); !ok {
		return &ValidationError{Name: "dimentions", err: errors.New(`ent: missing required field "ProcessedImage.dimentions"`)}
	}
	if v, ok := pic.mutation.Dimentions(); ok {
		if err := processedimage.DimentionsValidator(v); err != nil {
			return &ValidationError{Name: "dimentions", err: fmt.Errorf(`ent: validator failed for field "ProcessedImage.dimentions": %w`, err)}
		}
	}
	if _, ok := pic.mutation.SizeBits(); !ok {
		return &ValidationError{Name: "size_bits", err: errors.New(`ent: missing required field "ProcessedImage.size_bits"`)}
	}
	if _, ok := pic.mutation.Thumb(); !ok {
		return &ValidationError{Name: "thumb", err: errors.New(`ent: missing required field "ProcessedImage.thumb"`)}
	}
	if v, ok := pic.mutation.Thumb(); ok {
		if err := processedimage.ThumbValidator(v); err != nil {
			return &ValidationError{Name: "thumb", err: fmt.Errorf(`ent: validator failed for field "ProcessedImage.thumb": %w`, err)}
		}
	}
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessedImage.created_at"`)}
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessedImage.updated_at"`)}
	}
	if len(pic.mutation.SourceIDs()) == 0 {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required edge "ProcessedImage.source"`)}
	}
	return nil
}

func (pic *ProcessedImageCreate) sqlSave(ctx context.Context) (*ProcessedImage, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = pid.ID(id)
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *ProcessedImageCreate) createSpec() (*ProcessedImage, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessedImage{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(processedimage.Table, sqlgraph.NewFieldSpec(processedimage.FieldID, field.TypeInt64))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.GetType(); ok {
		_spec.SetField(processedimage.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pic.mutation.Dimentions(); ok {
		_spec.SetField(processedimage.FieldDimentions, field.TypeInt, value)
		_node.Dimentions = value
	}
	if value, ok := pic.mutation.SizeBits(); ok {
		_spec.SetField(processedimage.FieldSizeBits, field.TypeUint32, value)
		_node.SizeBits = value
	}
	if value, ok := pic.mutation.Thumb(); ok {
		_spec.SetField(processedimage.FieldThumb, field.TypeBytes, value)
		_node.Thumb = value
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(processedimage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.SetField(processedimage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pic.mutation.DeletedAt(); ok {
		_spec.SetField(processedimage.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := pic.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   processedimage.SourceTable,
			Columns: []string{processedimage.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_proccesed_image = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProcessedImageCreateBulk is the builder for creating many ProcessedImage entities in bulk.
type ProcessedImageCreateBulk struct {
	config
	err      error
	builders []*ProcessedImageCreate
}

// Save creates the ProcessedImage entities in the database.
func (picb *ProcessedImageCreateBulk) Save(ctx context.Context) ([]*ProcessedImage, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProcessedImage, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessedImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = pid.ID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProcessedImageCreateBulk) SaveX(ctx context.Context) []*ProcessedImage {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProcessedImageCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProcessedImageCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
