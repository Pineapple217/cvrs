// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
	"github.com/Pineapple217/cvrs/pkg/ent/release"
	"github.com/Pineapple217/cvrs/pkg/ent/user"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ImageUpdate is the builder for updating Image entities.
type ImageUpdate struct {
	config
	hooks    []Hook
	mutation *ImageMutation
}

// Where appends a list predicates to the ImageUpdate builder.
func (iu *ImageUpdate) Where(ps ...predicate.Image) *ImageUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetFile sets the "file" field.
func (iu *ImageUpdate) SetFile(s string) *ImageUpdate {
	iu.mutation.SetFile(s)
	return iu
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableFile(s *string) *ImageUpdate {
	if s != nil {
		iu.SetFile(*s)
	}
	return iu
}

// SetType sets the "type" field.
func (iu *ImageUpdate) SetType(i image.Type) *ImageUpdate {
	iu.mutation.SetType(i)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableType(i *image.Type) *ImageUpdate {
	if i != nil {
		iu.SetType(*i)
	}
	return iu
}

// SetNote sets the "note" field.
func (iu *ImageUpdate) SetNote(s string) *ImageUpdate {
	iu.mutation.SetNote(s)
	return iu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableNote(s *string) *ImageUpdate {
	if s != nil {
		iu.SetNote(*s)
	}
	return iu
}

// ClearNote clears the value of the "note" field.
func (iu *ImageUpdate) ClearNote() *ImageUpdate {
	iu.mutation.ClearNote()
	return iu
}

// SetDimentions sets the "dimentions" field.
func (iu *ImageUpdate) SetDimentions(i []int) *ImageUpdate {
	iu.mutation.SetDimentions(i)
	return iu
}

// AppendDimentions appends i to the "dimentions" field.
func (iu *ImageUpdate) AppendDimentions(i []int) *ImageUpdate {
	iu.mutation.AppendDimentions(i)
	return iu
}

// SetSizeBits sets the "size_bits" field.
func (iu *ImageUpdate) SetSizeBits(u uint32) *ImageUpdate {
	iu.mutation.ResetSizeBits()
	iu.mutation.SetSizeBits(u)
	return iu
}

// SetNillableSizeBits sets the "size_bits" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableSizeBits(u *uint32) *ImageUpdate {
	if u != nil {
		iu.SetSizeBits(*u)
	}
	return iu
}

// AddSizeBits adds u to the "size_bits" field.
func (iu *ImageUpdate) AddSizeBits(u int32) *ImageUpdate {
	iu.mutation.AddSizeBits(u)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ImageUpdate) SetUpdatedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *ImageUpdate) SetDeletedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableDeletedAt(t *time.Time) *ImageUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *ImageUpdate) ClearDeletedAt() *ImageUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (iu *ImageUpdate) SetReleaseID(id pid.ID) *ImageUpdate {
	iu.mutation.SetReleaseID(id)
	return iu
}

// SetRelease sets the "release" edge to the Release entity.
func (iu *ImageUpdate) SetRelease(r *Release) *ImageUpdate {
	return iu.SetReleaseID(r.ID)
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (iu *ImageUpdate) SetUploaderID(id pid.ID) *ImageUpdate {
	iu.mutation.SetUploaderID(id)
	return iu
}

// SetUploader sets the "uploader" edge to the User entity.
func (iu *ImageUpdate) SetUploader(u *User) *ImageUpdate {
	return iu.SetUploaderID(u.ID)
}

// Mutation returns the ImageMutation object of the builder.
func (iu *ImageUpdate) Mutation() *ImageMutation {
	return iu.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (iu *ImageUpdate) ClearRelease() *ImageUpdate {
	iu.mutation.ClearRelease()
	return iu
}

// ClearUploader clears the "uploader" edge to the User entity.
func (iu *ImageUpdate) ClearUploader() *ImageUpdate {
	iu.mutation.ClearUploader()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImageUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImageUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImageUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImageUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ImageUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := image.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ImageUpdate) check() error {
	if v, ok := iu.mutation.File(); ok {
		if err := image.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "Image.file": %w`, err)}
		}
	}
	if v, ok := iu.mutation.GetType(); ok {
		if err := image.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Image.type": %w`, err)}
		}
	}
	if iu.mutation.ReleaseCleared() && len(iu.mutation.ReleaseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Image.release"`)
	}
	if iu.mutation.UploaderCleared() && len(iu.mutation.UploaderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Image.uploader"`)
	}
	return nil
}

func (iu *ImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.File(); ok {
		_spec.SetField(image.FieldFile, field.TypeString, value)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(image.FieldType, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.Note(); ok {
		_spec.SetField(image.FieldNote, field.TypeString, value)
	}
	if iu.mutation.NoteCleared() {
		_spec.ClearField(image.FieldNote, field.TypeString)
	}
	if value, ok := iu.mutation.Dimentions(); ok {
		_spec.SetField(image.FieldDimentions, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.AppendedDimentions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, image.FieldDimentions, value)
		})
	}
	if value, ok := iu.mutation.SizeBits(); ok {
		_spec.SetField(image.FieldSizeBits, field.TypeUint32, value)
	}
	if value, ok := iu.mutation.AddedSizeBits(); ok {
		_spec.AddField(image.FieldSizeBits, field.TypeUint32, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(image.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(image.FieldDeletedAt, field.TypeTime)
	}
	if iu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   image.ReleaseTable,
			Columns: []string{image.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   image.ReleaseTable,
			Columns: []string{image.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploaderTable,
			Columns: []string{image.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploaderTable,
			Columns: []string{image.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ImageUpdateOne is the builder for updating a single Image entity.
type ImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageMutation
}

// SetFile sets the "file" field.
func (iuo *ImageUpdateOne) SetFile(s string) *ImageUpdateOne {
	iuo.mutation.SetFile(s)
	return iuo
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableFile(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetFile(*s)
	}
	return iuo
}

// SetType sets the "type" field.
func (iuo *ImageUpdateOne) SetType(i image.Type) *ImageUpdateOne {
	iuo.mutation.SetType(i)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableType(i *image.Type) *ImageUpdateOne {
	if i != nil {
		iuo.SetType(*i)
	}
	return iuo
}

// SetNote sets the "note" field.
func (iuo *ImageUpdateOne) SetNote(s string) *ImageUpdateOne {
	iuo.mutation.SetNote(s)
	return iuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableNote(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetNote(*s)
	}
	return iuo
}

// ClearNote clears the value of the "note" field.
func (iuo *ImageUpdateOne) ClearNote() *ImageUpdateOne {
	iuo.mutation.ClearNote()
	return iuo
}

// SetDimentions sets the "dimentions" field.
func (iuo *ImageUpdateOne) SetDimentions(i []int) *ImageUpdateOne {
	iuo.mutation.SetDimentions(i)
	return iuo
}

// AppendDimentions appends i to the "dimentions" field.
func (iuo *ImageUpdateOne) AppendDimentions(i []int) *ImageUpdateOne {
	iuo.mutation.AppendDimentions(i)
	return iuo
}

// SetSizeBits sets the "size_bits" field.
func (iuo *ImageUpdateOne) SetSizeBits(u uint32) *ImageUpdateOne {
	iuo.mutation.ResetSizeBits()
	iuo.mutation.SetSizeBits(u)
	return iuo
}

// SetNillableSizeBits sets the "size_bits" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableSizeBits(u *uint32) *ImageUpdateOne {
	if u != nil {
		iuo.SetSizeBits(*u)
	}
	return iuo
}

// AddSizeBits adds u to the "size_bits" field.
func (iuo *ImageUpdateOne) AddSizeBits(u int32) *ImageUpdateOne {
	iuo.mutation.AddSizeBits(u)
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ImageUpdateOne) SetUpdatedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *ImageUpdateOne) SetDeletedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableDeletedAt(t *time.Time) *ImageUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *ImageUpdateOne) ClearDeletedAt() *ImageUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (iuo *ImageUpdateOne) SetReleaseID(id pid.ID) *ImageUpdateOne {
	iuo.mutation.SetReleaseID(id)
	return iuo
}

// SetRelease sets the "release" edge to the Release entity.
func (iuo *ImageUpdateOne) SetRelease(r *Release) *ImageUpdateOne {
	return iuo.SetReleaseID(r.ID)
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (iuo *ImageUpdateOne) SetUploaderID(id pid.ID) *ImageUpdateOne {
	iuo.mutation.SetUploaderID(id)
	return iuo
}

// SetUploader sets the "uploader" edge to the User entity.
func (iuo *ImageUpdateOne) SetUploader(u *User) *ImageUpdateOne {
	return iuo.SetUploaderID(u.ID)
}

// Mutation returns the ImageMutation object of the builder.
func (iuo *ImageUpdateOne) Mutation() *ImageMutation {
	return iuo.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (iuo *ImageUpdateOne) ClearRelease() *ImageUpdateOne {
	iuo.mutation.ClearRelease()
	return iuo
}

// ClearUploader clears the "uploader" edge to the User entity.
func (iuo *ImageUpdateOne) ClearUploader() *ImageUpdateOne {
	iuo.mutation.ClearUploader()
	return iuo
}

// Where appends a list predicates to the ImageUpdate builder.
func (iuo *ImageUpdateOne) Where(ps ...predicate.Image) *ImageUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImageUpdateOne) Select(field string, fields ...string) *ImageUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Image entity.
func (iuo *ImageUpdateOne) Save(ctx context.Context) (*Image, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImageUpdateOne) SaveX(ctx context.Context) *Image {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImageUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImageUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ImageUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := image.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ImageUpdateOne) check() error {
	if v, ok := iuo.mutation.File(); ok {
		if err := image.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "Image.file": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.GetType(); ok {
		if err := image.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Image.type": %w`, err)}
		}
	}
	if iuo.mutation.ReleaseCleared() && len(iuo.mutation.ReleaseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Image.release"`)
	}
	if iuo.mutation.UploaderCleared() && len(iuo.mutation.UploaderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Image.uploader"`)
	}
	return nil
}

func (iuo *ImageUpdateOne) sqlSave(ctx context.Context) (_node *Image, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Image.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, image.FieldID)
		for _, f := range fields {
			if !image.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != image.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.File(); ok {
		_spec.SetField(image.FieldFile, field.TypeString, value)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(image.FieldType, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.Note(); ok {
		_spec.SetField(image.FieldNote, field.TypeString, value)
	}
	if iuo.mutation.NoteCleared() {
		_spec.ClearField(image.FieldNote, field.TypeString)
	}
	if value, ok := iuo.mutation.Dimentions(); ok {
		_spec.SetField(image.FieldDimentions, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.AppendedDimentions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, image.FieldDimentions, value)
		})
	}
	if value, ok := iuo.mutation.SizeBits(); ok {
		_spec.SetField(image.FieldSizeBits, field.TypeUint32, value)
	}
	if value, ok := iuo.mutation.AddedSizeBits(); ok {
		_spec.AddField(image.FieldSizeBits, field.TypeUint32, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(image.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(image.FieldDeletedAt, field.TypeTime)
	}
	if iuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   image.ReleaseTable,
			Columns: []string{image.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   image.ReleaseTable,
			Columns: []string{image.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.UploaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploaderTable,
			Columns: []string{image.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploaderTable,
			Columns: []string{image.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Image{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
