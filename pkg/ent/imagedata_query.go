// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/imagedata"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
)

// ImageDataQuery is the builder for querying ImageData entities.
type ImageDataQuery struct {
	config
	ctx        *QueryContext
	order      []imagedata.OrderOption
	inters     []Interceptor
	predicates []predicate.ImageData
	withImage  *ImageQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ImageDataQuery builder.
func (idq *ImageDataQuery) Where(ps ...predicate.ImageData) *ImageDataQuery {
	idq.predicates = append(idq.predicates, ps...)
	return idq
}

// Limit the number of records to be returned by this query.
func (idq *ImageDataQuery) Limit(limit int) *ImageDataQuery {
	idq.ctx.Limit = &limit
	return idq
}

// Offset to start from.
func (idq *ImageDataQuery) Offset(offset int) *ImageDataQuery {
	idq.ctx.Offset = &offset
	return idq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (idq *ImageDataQuery) Unique(unique bool) *ImageDataQuery {
	idq.ctx.Unique = &unique
	return idq
}

// Order specifies how the records should be ordered.
func (idq *ImageDataQuery) Order(o ...imagedata.OrderOption) *ImageDataQuery {
	idq.order = append(idq.order, o...)
	return idq
}

// QueryImage chains the current query on the "image" edge.
func (idq *ImageDataQuery) QueryImage() *ImageQuery {
	query := (&ImageClient{config: idq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := idq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := idq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagedata.Table, imagedata.FieldID, selector),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, imagedata.ImageTable, imagedata.ImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(idq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ImageData entity from the query.
// Returns a *NotFoundError when no ImageData was found.
func (idq *ImageDataQuery) First(ctx context.Context) (*ImageData, error) {
	nodes, err := idq.Limit(1).All(setContextOp(ctx, idq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{imagedata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (idq *ImageDataQuery) FirstX(ctx context.Context) *ImageData {
	node, err := idq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ImageData ID from the query.
// Returns a *NotFoundError when no ImageData ID was found.
func (idq *ImageDataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = idq.Limit(1).IDs(setContextOp(ctx, idq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{imagedata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (idq *ImageDataQuery) FirstIDX(ctx context.Context) int {
	id, err := idq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ImageData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ImageData entity is found.
// Returns a *NotFoundError when no ImageData entities are found.
func (idq *ImageDataQuery) Only(ctx context.Context) (*ImageData, error) {
	nodes, err := idq.Limit(2).All(setContextOp(ctx, idq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{imagedata.Label}
	default:
		return nil, &NotSingularError{imagedata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (idq *ImageDataQuery) OnlyX(ctx context.Context) *ImageData {
	node, err := idq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ImageData ID in the query.
// Returns a *NotSingularError when more than one ImageData ID is found.
// Returns a *NotFoundError when no entities are found.
func (idq *ImageDataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = idq.Limit(2).IDs(setContextOp(ctx, idq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{imagedata.Label}
	default:
		err = &NotSingularError{imagedata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (idq *ImageDataQuery) OnlyIDX(ctx context.Context) int {
	id, err := idq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ImageDataSlice.
func (idq *ImageDataQuery) All(ctx context.Context) ([]*ImageData, error) {
	ctx = setContextOp(ctx, idq.ctx, ent.OpQueryAll)
	if err := idq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ImageData, *ImageDataQuery]()
	return withInterceptors[[]*ImageData](ctx, idq, qr, idq.inters)
}

// AllX is like All, but panics if an error occurs.
func (idq *ImageDataQuery) AllX(ctx context.Context) []*ImageData {
	nodes, err := idq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ImageData IDs.
func (idq *ImageDataQuery) IDs(ctx context.Context) (ids []int, err error) {
	if idq.ctx.Unique == nil && idq.path != nil {
		idq.Unique(true)
	}
	ctx = setContextOp(ctx, idq.ctx, ent.OpQueryIDs)
	if err = idq.Select(imagedata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (idq *ImageDataQuery) IDsX(ctx context.Context) []int {
	ids, err := idq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (idq *ImageDataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, idq.ctx, ent.OpQueryCount)
	if err := idq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, idq, querierCount[*ImageDataQuery](), idq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (idq *ImageDataQuery) CountX(ctx context.Context) int {
	count, err := idq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (idq *ImageDataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, idq.ctx, ent.OpQueryExist)
	switch _, err := idq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (idq *ImageDataQuery) ExistX(ctx context.Context) bool {
	exist, err := idq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ImageDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (idq *ImageDataQuery) Clone() *ImageDataQuery {
	if idq == nil {
		return nil
	}
	return &ImageDataQuery{
		config:     idq.config,
		ctx:        idq.ctx.Clone(),
		order:      append([]imagedata.OrderOption{}, idq.order...),
		inters:     append([]Interceptor{}, idq.inters...),
		predicates: append([]predicate.ImageData{}, idq.predicates...),
		withImage:  idq.withImage.Clone(),
		// clone intermediate query.
		sql:  idq.sql.Clone(),
		path: idq.path,
	}
}

// WithImage tells the query-builder to eager-load the nodes that are connected to
// the "image" edge. The optional arguments are used to configure the query builder of the edge.
func (idq *ImageDataQuery) WithImage(opts ...func(*ImageQuery)) *ImageDataQuery {
	query := (&ImageClient{config: idq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	idq.withImage = query
	return idq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AvrR int `json:"avr_r,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ImageData.Query().
//		GroupBy(imagedata.FieldAvrR).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (idq *ImageDataQuery) GroupBy(field string, fields ...string) *ImageDataGroupBy {
	idq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ImageDataGroupBy{build: idq}
	grbuild.flds = &idq.ctx.Fields
	grbuild.label = imagedata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AvrR int `json:"avr_r,omitempty"`
//	}
//
//	client.ImageData.Query().
//		Select(imagedata.FieldAvrR).
//		Scan(ctx, &v)
func (idq *ImageDataQuery) Select(fields ...string) *ImageDataSelect {
	idq.ctx.Fields = append(idq.ctx.Fields, fields...)
	sbuild := &ImageDataSelect{ImageDataQuery: idq}
	sbuild.label = imagedata.Label
	sbuild.flds, sbuild.scan = &idq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ImageDataSelect configured with the given aggregations.
func (idq *ImageDataQuery) Aggregate(fns ...AggregateFunc) *ImageDataSelect {
	return idq.Select().Aggregate(fns...)
}

func (idq *ImageDataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range idq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, idq); err != nil {
				return err
			}
		}
	}
	for _, f := range idq.ctx.Fields {
		if !imagedata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if idq.path != nil {
		prev, err := idq.path(ctx)
		if err != nil {
			return err
		}
		idq.sql = prev
	}
	return nil
}

func (idq *ImageDataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ImageData, error) {
	var (
		nodes       = []*ImageData{}
		_spec       = idq.querySpec()
		loadedTypes = [1]bool{
			idq.withImage != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ImageData).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ImageData{config: idq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, idq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := idq.withImage; query != nil {
		if err := idq.loadImage(ctx, query, nodes,
			func(n *ImageData) { n.Edges.Image = []*Image{} },
			func(n *ImageData, e *Image) { n.Edges.Image = append(n.Edges.Image, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (idq *ImageDataQuery) loadImage(ctx context.Context, query *ImageQuery, nodes []*ImageData, init func(*ImageData), assign func(*ImageData, *Image)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ImageData)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Image(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(imagedata.ImageColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.image_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "image_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "image_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (idq *ImageDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := idq.querySpec()
	_spec.Node.Columns = idq.ctx.Fields
	if len(idq.ctx.Fields) > 0 {
		_spec.Unique = idq.ctx.Unique != nil && *idq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, idq.driver, _spec)
}

func (idq *ImageDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(imagedata.Table, imagedata.Columns, sqlgraph.NewFieldSpec(imagedata.FieldID, field.TypeInt))
	_spec.From = idq.sql
	if unique := idq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if idq.path != nil {
		_spec.Unique = true
	}
	if fields := idq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagedata.FieldID)
		for i := range fields {
			if fields[i] != imagedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := idq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := idq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := idq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := idq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (idq *ImageDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(idq.driver.Dialect())
	t1 := builder.Table(imagedata.Table)
	columns := idq.ctx.Fields
	if len(columns) == 0 {
		columns = imagedata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if idq.sql != nil {
		selector = idq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if idq.ctx.Unique != nil && *idq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range idq.predicates {
		p(selector)
	}
	for _, p := range idq.order {
		p(selector)
	}
	if offset := idq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := idq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ImageDataGroupBy is the group-by builder for ImageData entities.
type ImageDataGroupBy struct {
	selector
	build *ImageDataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (idgb *ImageDataGroupBy) Aggregate(fns ...AggregateFunc) *ImageDataGroupBy {
	idgb.fns = append(idgb.fns, fns...)
	return idgb
}

// Scan applies the selector query and scans the result into the given value.
func (idgb *ImageDataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, idgb.build.ctx, ent.OpQueryGroupBy)
	if err := idgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageDataQuery, *ImageDataGroupBy](ctx, idgb.build, idgb, idgb.build.inters, v)
}

func (idgb *ImageDataGroupBy) sqlScan(ctx context.Context, root *ImageDataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(idgb.fns))
	for _, fn := range idgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*idgb.flds)+len(idgb.fns))
		for _, f := range *idgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*idgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := idgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ImageDataSelect is the builder for selecting fields of ImageData entities.
type ImageDataSelect struct {
	*ImageDataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ids *ImageDataSelect) Aggregate(fns ...AggregateFunc) *ImageDataSelect {
	ids.fns = append(ids.fns, fns...)
	return ids
}

// Scan applies the selector query and scans the result into the given value.
func (ids *ImageDataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ids.ctx, ent.OpQuerySelect)
	if err := ids.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageDataQuery, *ImageDataSelect](ctx, ids.ImageDataQuery, ids, ids.inters, v)
}

func (ids *ImageDataSelect) sqlScan(ctx context.Context, root *ImageDataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ids.fns))
	for _, fn := range ids.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ids.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ids.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
