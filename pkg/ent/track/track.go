// Code generated by ent, DO NOT EDIT.

package track

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

const (
	// Label holds the string label denoting the track type in the database.
	Label = "track"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// EdgeAppearingArtists holds the string denoting the appearing_artists edge name in mutations.
	EdgeAppearingArtists = "appearing_artists"
	// EdgeAppearance holds the string denoting the appearance edge name in mutations.
	EdgeAppearance = "appearance"
	// Table holds the table name of the track in the database.
	Table = "tracks"
	// AppearingArtistsTable is the table that holds the appearing_artists relation/edge. The primary key declared below.
	AppearingArtistsTable = "track_appearances"
	// AppearingArtistsInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	AppearingArtistsInverseTable = "artists"
	// AppearanceTable is the table that holds the appearance relation/edge.
	AppearanceTable = "track_appearances"
	// AppearanceInverseTable is the table name for the TrackAppearance entity.
	// It exists in this package in order to avoid circular dependency with the "trackappearance" package.
	AppearanceInverseTable = "track_appearances"
	// AppearanceColumn is the table column denoting the appearance relation/edge.
	AppearanceColumn = "track_id"
)

// Columns holds all SQL columns for track fields.
var Columns = []string{
	FieldID,
	FieldTitle,
}

var (
	// AppearingArtistsPrimaryKey and AppearingArtistsColumn2 are the table columns denoting the
	// primary key for the appearing_artists relation (M2M).
	AppearingArtistsPrimaryKey = []string{"artist_id", "track_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pid.ID
)

// OrderOption defines the ordering options for the Track queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByAppearingArtistsCount orders the results by appearing_artists count.
func ByAppearingArtistsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppearingArtistsStep(), opts...)
	}
}

// ByAppearingArtists orders the results by appearing_artists terms.
func ByAppearingArtists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppearingArtistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAppearanceCount orders the results by appearance count.
func ByAppearanceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppearanceStep(), opts...)
	}
}

// ByAppearance orders the results by appearance terms.
func ByAppearance(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppearanceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAppearingArtistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppearingArtistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AppearingArtistsTable, AppearingArtistsPrimaryKey...),
	)
}
func newAppearanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppearanceInverseTable, AppearanceColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, AppearanceTable, AppearanceColumn),
	)
}
