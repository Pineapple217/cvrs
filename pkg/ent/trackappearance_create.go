// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/artist"
	"github.com/Pineapple217/cvrs/pkg/ent/track"
	"github.com/Pineapple217/cvrs/pkg/ent/trackappearance"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// TrackAppearanceCreate is the builder for creating a TrackAppearance entity.
type TrackAppearanceCreate struct {
	config
	mutation *TrackAppearanceMutation
	hooks    []Hook
}

// SetTrackID sets the "track_id" field.
func (tac *TrackAppearanceCreate) SetTrackID(pi pid.ID) *TrackAppearanceCreate {
	tac.mutation.SetTrackID(pi)
	return tac
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (tac *TrackAppearanceCreate) SetNillableTrackID(pi *pid.ID) *TrackAppearanceCreate {
	if pi != nil {
		tac.SetTrackID(*pi)
	}
	return tac
}

// SetArtistID sets the "artist_id" field.
func (tac *TrackAppearanceCreate) SetArtistID(pi pid.ID) *TrackAppearanceCreate {
	tac.mutation.SetArtistID(pi)
	return tac
}

// SetNillableArtistID sets the "artist_id" field if the given value is not nil.
func (tac *TrackAppearanceCreate) SetNillableArtistID(pi *pid.ID) *TrackAppearanceCreate {
	if pi != nil {
		tac.SetArtistID(*pi)
	}
	return tac
}

// SetOrder sets the "order" field.
func (tac *TrackAppearanceCreate) SetOrder(i int) *TrackAppearanceCreate {
	tac.mutation.SetOrder(i)
	return tac
}

// SetArtist sets the "artist" edge to the Artist entity.
func (tac *TrackAppearanceCreate) SetArtist(a *Artist) *TrackAppearanceCreate {
	return tac.SetArtistID(a.ID)
}

// SetTrack sets the "track" edge to the Track entity.
func (tac *TrackAppearanceCreate) SetTrack(t *Track) *TrackAppearanceCreate {
	return tac.SetTrackID(t.ID)
}

// Mutation returns the TrackAppearanceMutation object of the builder.
func (tac *TrackAppearanceCreate) Mutation() *TrackAppearanceMutation {
	return tac.mutation
}

// Save creates the TrackAppearance in the database.
func (tac *TrackAppearanceCreate) Save(ctx context.Context) (*TrackAppearance, error) {
	tac.defaults()
	return withHooks(ctx, tac.sqlSave, tac.mutation, tac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tac *TrackAppearanceCreate) SaveX(ctx context.Context) *TrackAppearance {
	v, err := tac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tac *TrackAppearanceCreate) Exec(ctx context.Context) error {
	_, err := tac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tac *TrackAppearanceCreate) ExecX(ctx context.Context) {
	if err := tac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tac *TrackAppearanceCreate) defaults() {
	if _, ok := tac.mutation.TrackID(); !ok {
		v := trackappearance.DefaultTrackID()
		tac.mutation.SetTrackID(v)
	}
	if _, ok := tac.mutation.ArtistID(); !ok {
		v := trackappearance.DefaultArtistID()
		tac.mutation.SetArtistID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tac *TrackAppearanceCreate) check() error {
	if _, ok := tac.mutation.TrackID(); !ok {
		return &ValidationError{Name: "track_id", err: errors.New(`ent: missing required field "TrackAppearance.track_id"`)}
	}
	if _, ok := tac.mutation.ArtistID(); !ok {
		return &ValidationError{Name: "artist_id", err: errors.New(`ent: missing required field "TrackAppearance.artist_id"`)}
	}
	if _, ok := tac.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "TrackAppearance.order"`)}
	}
	if v, ok := tac.mutation.Order(); ok {
		if err := trackappearance.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "TrackAppearance.order": %w`, err)}
		}
	}
	if len(tac.mutation.ArtistIDs()) == 0 {
		return &ValidationError{Name: "artist", err: errors.New(`ent: missing required edge "TrackAppearance.artist"`)}
	}
	if len(tac.mutation.TrackIDs()) == 0 {
		return &ValidationError{Name: "track", err: errors.New(`ent: missing required edge "TrackAppearance.track"`)}
	}
	return nil
}

func (tac *TrackAppearanceCreate) sqlSave(ctx context.Context) (*TrackAppearance, error) {
	if err := tac.check(); err != nil {
		return nil, err
	}
	_node, _spec := tac.createSpec()
	if err := sqlgraph.CreateNode(ctx, tac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (tac *TrackAppearanceCreate) createSpec() (*TrackAppearance, *sqlgraph.CreateSpec) {
	var (
		_node = &TrackAppearance{config: tac.config}
		_spec = sqlgraph.NewCreateSpec(trackappearance.Table, nil)
	)
	if value, ok := tac.mutation.Order(); ok {
		_spec.SetField(trackappearance.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := tac.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.ArtistTable,
			Columns: []string{trackappearance.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArtistID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tac.mutation.TrackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.TrackTable,
			Columns: []string{trackappearance.TrackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TrackID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrackAppearanceCreateBulk is the builder for creating many TrackAppearance entities in bulk.
type TrackAppearanceCreateBulk struct {
	config
	err      error
	builders []*TrackAppearanceCreate
}

// Save creates the TrackAppearance entities in the database.
func (tacb *TrackAppearanceCreateBulk) Save(ctx context.Context) ([]*TrackAppearance, error) {
	if tacb.err != nil {
		return nil, tacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tacb.builders))
	nodes := make([]*TrackAppearance, len(tacb.builders))
	mutators := make([]Mutator, len(tacb.builders))
	for i := range tacb.builders {
		func(i int, root context.Context) {
			builder := tacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrackAppearanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tacb *TrackAppearanceCreateBulk) SaveX(ctx context.Context) []*TrackAppearance {
	v, err := tacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tacb *TrackAppearanceCreateBulk) Exec(ctx context.Context) error {
	_, err := tacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacb *TrackAppearanceCreateBulk) ExecX(ctx context.Context) {
	if err := tacb.Exec(ctx); err != nil {
		panic(err)
	}
}
