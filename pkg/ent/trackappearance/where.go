// Code generated by ent, DO NOT EDIT.

package trackappearance

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// TrackID applies equality check predicate on the "track_id" field. It's identical to TrackIDEQ.
func TrackID(v pid.ID) predicate.TrackAppearance {
	vc := int64(v)
	return predicate.TrackAppearance(sql.FieldEQ(FieldTrackID, vc))
}

// ArtistID applies equality check predicate on the "artist_id" field. It's identical to ArtistIDEQ.
func ArtistID(v pid.ID) predicate.TrackAppearance {
	vc := int64(v)
	return predicate.TrackAppearance(sql.FieldEQ(FieldArtistID, vc))
}

// Order applies equality check predicate on the "order" field. It's identical to OrderEQ.
func Order(v int) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.FieldEQ(FieldOrder, v))
}

// TrackIDEQ applies the EQ predicate on the "track_id" field.
func TrackIDEQ(v pid.ID) predicate.TrackAppearance {
	vc := int64(v)
	return predicate.TrackAppearance(sql.FieldEQ(FieldTrackID, vc))
}

// TrackIDNEQ applies the NEQ predicate on the "track_id" field.
func TrackIDNEQ(v pid.ID) predicate.TrackAppearance {
	vc := int64(v)
	return predicate.TrackAppearance(sql.FieldNEQ(FieldTrackID, vc))
}

// TrackIDIn applies the In predicate on the "track_id" field.
func TrackIDIn(vs ...pid.ID) predicate.TrackAppearance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.TrackAppearance(sql.FieldIn(FieldTrackID, v...))
}

// TrackIDNotIn applies the NotIn predicate on the "track_id" field.
func TrackIDNotIn(vs ...pid.ID) predicate.TrackAppearance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.TrackAppearance(sql.FieldNotIn(FieldTrackID, v...))
}

// ArtistIDEQ applies the EQ predicate on the "artist_id" field.
func ArtistIDEQ(v pid.ID) predicate.TrackAppearance {
	vc := int64(v)
	return predicate.TrackAppearance(sql.FieldEQ(FieldArtistID, vc))
}

// ArtistIDNEQ applies the NEQ predicate on the "artist_id" field.
func ArtistIDNEQ(v pid.ID) predicate.TrackAppearance {
	vc := int64(v)
	return predicate.TrackAppearance(sql.FieldNEQ(FieldArtistID, vc))
}

// ArtistIDIn applies the In predicate on the "artist_id" field.
func ArtistIDIn(vs ...pid.ID) predicate.TrackAppearance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.TrackAppearance(sql.FieldIn(FieldArtistID, v...))
}

// ArtistIDNotIn applies the NotIn predicate on the "artist_id" field.
func ArtistIDNotIn(vs ...pid.ID) predicate.TrackAppearance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int64(vs[i])
	}
	return predicate.TrackAppearance(sql.FieldNotIn(FieldArtistID, v...))
}

// OrderEQ applies the EQ predicate on the "order" field.
func OrderEQ(v int) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.FieldEQ(FieldOrder, v))
}

// OrderNEQ applies the NEQ predicate on the "order" field.
func OrderNEQ(v int) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.FieldNEQ(FieldOrder, v))
}

// OrderIn applies the In predicate on the "order" field.
func OrderIn(vs ...int) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.FieldIn(FieldOrder, vs...))
}

// OrderNotIn applies the NotIn predicate on the "order" field.
func OrderNotIn(vs ...int) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.FieldNotIn(FieldOrder, vs...))
}

// OrderGT applies the GT predicate on the "order" field.
func OrderGT(v int) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.FieldGT(FieldOrder, v))
}

// OrderGTE applies the GTE predicate on the "order" field.
func OrderGTE(v int) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.FieldGTE(FieldOrder, v))
}

// OrderLT applies the LT predicate on the "order" field.
func OrderLT(v int) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.FieldLT(FieldOrder, v))
}

// OrderLTE applies the LTE predicate on the "order" field.
func OrderLTE(v int) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.FieldLTE(FieldOrder, v))
}

// HasArtist applies the HasEdge predicate on the "artist" edge.
func HasArtist() predicate.TrackAppearance {
	return predicate.TrackAppearance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ArtistColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, ArtistTable, ArtistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArtistWith applies the HasEdge predicate on the "artist" edge with a given conditions (other predicates).
func HasArtistWith(preds ...predicate.Artist) predicate.TrackAppearance {
	return predicate.TrackAppearance(func(s *sql.Selector) {
		step := newArtistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrack applies the HasEdge predicate on the "track" edge.
func HasTrack() predicate.TrackAppearance {
	return predicate.TrackAppearance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TrackColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TrackTable, TrackColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrackWith applies the HasEdge predicate on the "track" edge with a given conditions (other predicates).
func HasTrackWith(preds ...predicate.Track) predicate.TrackAppearance {
	return predicate.TrackAppearance(func(s *sql.Selector) {
		step := newTrackStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TrackAppearance) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TrackAppearance) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TrackAppearance) predicate.TrackAppearance {
	return predicate.TrackAppearance(sql.NotPredicates(p))
}
