// Code generated by ent, DO NOT EDIT.

package trackappearance

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

const (
	// Label holds the string label denoting the trackappearance type in the database.
	Label = "track_appearance"
	// FieldTrackID holds the string denoting the track_id field in the database.
	FieldTrackID = "track_id"
	// FieldArtistID holds the string denoting the artist_id field in the database.
	FieldArtistID = "artist_id"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeArtist holds the string denoting the artist edge name in mutations.
	EdgeArtist = "artist"
	// EdgeTrack holds the string denoting the track edge name in mutations.
	EdgeTrack = "track"
	// ArtistFieldID holds the string denoting the ID field of the Artist.
	ArtistFieldID = "id"
	// TrackFieldID holds the string denoting the ID field of the Track.
	TrackFieldID = "id"
	// Table holds the table name of the trackappearance in the database.
	Table = "track_appearances"
	// ArtistTable is the table that holds the artist relation/edge.
	ArtistTable = "track_appearances"
	// ArtistInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	ArtistInverseTable = "artists"
	// ArtistColumn is the table column denoting the artist relation/edge.
	ArtistColumn = "artist_id"
	// TrackTable is the table that holds the track relation/edge.
	TrackTable = "track_appearances"
	// TrackInverseTable is the table name for the Track entity.
	// It exists in this package in order to avoid circular dependency with the "track" package.
	TrackInverseTable = "tracks"
	// TrackColumn is the table column denoting the track relation/edge.
	TrackColumn = "track_id"
)

// Columns holds all SQL columns for trackappearance fields.
var Columns = []string{
	FieldTrackID,
	FieldArtistID,
	FieldOrder,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTrackID holds the default value on creation for the "track_id" field.
	DefaultTrackID func() pid.ID
	// DefaultArtistID holds the default value on creation for the "artist_id" field.
	DefaultArtistID func() pid.ID
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
)

// OrderOption defines the ordering options for the TrackAppearance queries.
type OrderOption func(*sql.Selector)

// ByTrackID orders the results by the track_id field.
func ByTrackID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrackID, opts...).ToFunc()
}

// ByArtistID orders the results by the artist_id field.
func ByArtistID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtistID, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByArtistField orders the results by artist field.
func ByArtistField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtistStep(), sql.OrderByField(field, opts...))
	}
}

// ByTrackField orders the results by track field.
func ByTrackField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrackStep(), sql.OrderByField(field, opts...))
	}
}
func newArtistStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ArtistColumn),
		sqlgraph.To(ArtistInverseTable, ArtistFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ArtistTable, ArtistColumn),
	)
}
func newTrackStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TrackColumn),
		sqlgraph.To(TrackInverseTable, TrackFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TrackTable, TrackColumn),
	)
}
