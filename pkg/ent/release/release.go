// Code generated by ent, DO NOT EDIT.

package release

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

const (
	// Label holds the string label denoting the release type in the database.
	Label = "release"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldReleaseDate holds the string denoting the release_date field in the database.
	FieldReleaseDate = "release_date"
	// EdgeImage holds the string denoting the image edge name in mutations.
	EdgeImage = "image"
	// EdgeTracks holds the string denoting the tracks edge name in mutations.
	EdgeTracks = "tracks"
	// EdgeAppearingArtists holds the string denoting the appearing_artists edge name in mutations.
	EdgeAppearingArtists = "appearing_artists"
	// EdgeReleaseAppearance holds the string denoting the release_appearance edge name in mutations.
	EdgeReleaseAppearance = "release_appearance"
	// Table holds the table name of the release in the database.
	Table = "releases"
	// ImageTable is the table that holds the image relation/edge.
	ImageTable = "images"
	// ImageInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImageInverseTable = "images"
	// ImageColumn is the table column denoting the image relation/edge.
	ImageColumn = "release_image"
	// TracksTable is the table that holds the tracks relation/edge.
	TracksTable = "tracks"
	// TracksInverseTable is the table name for the Track entity.
	// It exists in this package in order to avoid circular dependency with the "track" package.
	TracksInverseTable = "tracks"
	// TracksColumn is the table column denoting the tracks relation/edge.
	TracksColumn = "release_tracks"
	// AppearingArtistsTable is the table that holds the appearing_artists relation/edge. The primary key declared below.
	AppearingArtistsTable = "release_appearances"
	// AppearingArtistsInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	AppearingArtistsInverseTable = "artists"
	// ReleaseAppearanceTable is the table that holds the release_appearance relation/edge.
	ReleaseAppearanceTable = "release_appearances"
	// ReleaseAppearanceInverseTable is the table name for the ReleaseAppearance entity.
	// It exists in this package in order to avoid circular dependency with the "releaseappearance" package.
	ReleaseAppearanceInverseTable = "release_appearances"
	// ReleaseAppearanceColumn is the table column denoting the release_appearance relation/edge.
	ReleaseAppearanceColumn = "release_id"
)

// Columns holds all SQL columns for release fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldReleaseDate,
}

var (
	// AppearingArtistsPrimaryKey and AppearingArtistsColumn2 are the table columns denoting the
	// primary key for the appearing_artists relation (M2M).
	AppearingArtistsPrimaryKey = []string{"artist_id", "release_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pid.ID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeAlbum       Type = "album"
	TypeSingle      Type = "single"
	TypeEP          Type = "EP"
	TypeCompilation Type = "compilation"
	TypeUnknown     Type = "unknown"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeAlbum, TypeSingle, TypeEP, TypeCompilation, TypeUnknown:
		return nil
	default:
		return fmt.Errorf("release: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Release queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByReleaseDate orders the results by the release_date field.
func ByReleaseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseDate, opts...).ToFunc()
}

// ByImageField orders the results by image field.
func ByImageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImageStep(), sql.OrderByField(field, opts...))
	}
}

// ByTracksCount orders the results by tracks count.
func ByTracksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTracksStep(), opts...)
	}
}

// ByTracks orders the results by tracks terms.
func ByTracks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTracksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAppearingArtistsCount orders the results by appearing_artists count.
func ByAppearingArtistsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppearingArtistsStep(), opts...)
	}
}

// ByAppearingArtists orders the results by appearing_artists terms.
func ByAppearingArtists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppearingArtistsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReleaseAppearanceCount orders the results by release_appearance count.
func ByReleaseAppearanceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReleaseAppearanceStep(), opts...)
	}
}

// ByReleaseAppearance orders the results by release_appearance terms.
func ByReleaseAppearance(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReleaseAppearanceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ImageTable, ImageColumn),
	)
}
func newTracksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TracksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TracksTable, TracksColumn),
	)
}
func newAppearingArtistsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppearingArtistsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AppearingArtistsTable, AppearingArtistsPrimaryKey...),
	)
}
func newReleaseAppearanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReleaseAppearanceInverseTable, ReleaseAppearanceColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ReleaseAppearanceTable, ReleaseAppearanceColumn),
	)
}
