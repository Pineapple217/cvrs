// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/processedimage"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ProcessedImage is the model entity for the ProcessedImage schema.
type ProcessedImage struct {
	config `json:"-"`
	// ID of the ent.
	ID pid.ID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type processedimage.Type `json:"type,omitempty"`
	// Dimentions holds the value of the "dimentions" field.
	Dimentions int `json:"dimentions,omitempty"`
	// SizeBits holds the value of the "size_bits" field.
	SizeBits uint32 `json:"size_bits,omitempty"`
	// Thumb holds the value of the "thumb" field.
	Thumb []byte `json:"thumb,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitzero"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitzero"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitzero"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProcessedImageQuery when eager-loading is set.
	Edges                 ProcessedImageEdges `json:"edges"`
	image_proccesed_image *pid.ID
	selectValues          sql.SelectValues
}

// ProcessedImageEdges holds the relations/edges for other nodes in the graph.
type ProcessedImageEdges struct {
	// Source holds the value of the source edge.
	Source *Image `json:"source,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SourceOrErr returns the Source value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProcessedImageEdges) SourceOrErr() (*Image, error) {
	if e.Source != nil {
		return e.Source, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: image.Label}
	}
	return nil, &NotLoadedError{edge: "source"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessedImage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processedimage.FieldThumb:
			values[i] = new([]byte)
		case processedimage.FieldID, processedimage.FieldDimentions, processedimage.FieldSizeBits:
			values[i] = new(sql.NullInt64)
		case processedimage.FieldType:
			values[i] = new(sql.NullString)
		case processedimage.FieldCreatedAt, processedimage.FieldUpdatedAt, processedimage.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case processedimage.ForeignKeys[0]: // image_proccesed_image
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessedImage fields.
func (pi *ProcessedImage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processedimage.FieldID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pi.ID = pid.ID(value.Int64)
			}
		case processedimage.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pi.Type = processedimage.Type(value.String)
			}
		case processedimage.FieldDimentions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dimentions", values[i])
			} else if value.Valid {
				pi.Dimentions = int(value.Int64)
			}
		case processedimage.FieldSizeBits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size_bits", values[i])
			} else if value.Valid {
				pi.SizeBits = uint32(value.Int64)
			}
		case processedimage.FieldThumb:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field thumb", values[i])
			} else if value != nil {
				pi.Thumb = *value
			}
		case processedimage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case processedimage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case processedimage.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pi.DeletedAt = new(time.Time)
				*pi.DeletedAt = value.Time
			}
		case processedimage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field image_proccesed_image", values[i])
			} else if value.Valid {
				pi.image_proccesed_image = new(pid.ID)
				*pi.image_proccesed_image = pid.ID(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessedImage.
// This includes values selected through modifiers, order, etc.
func (pi *ProcessedImage) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QuerySource queries the "source" edge of the ProcessedImage entity.
func (pi *ProcessedImage) QuerySource() *ImageQuery {
	return NewProcessedImageClient(pi.config).QuerySource(pi)
}

// Update returns a builder for updating this ProcessedImage.
// Note that you need to call ProcessedImage.Unwrap() before calling this method if this ProcessedImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProcessedImage) Update() *ProcessedImageUpdateOne {
	return NewProcessedImageClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProcessedImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProcessedImage) Unwrap() *ProcessedImage {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessedImage is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProcessedImage) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessedImage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pi.Type))
	builder.WriteString(", ")
	builder.WriteString("dimentions=")
	builder.WriteString(fmt.Sprintf("%v", pi.Dimentions))
	builder.WriteString(", ")
	builder.WriteString("size_bits=")
	builder.WriteString(fmt.Sprintf("%v", pi.SizeBits))
	builder.WriteString(", ")
	builder.WriteString("thumb=")
	builder.WriteString(fmt.Sprintf("%v", pi.Thumb))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pi.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ProcessedImages is a parsable slice of ProcessedImage.
type ProcessedImages []*ProcessedImage
