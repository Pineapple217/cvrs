// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Pineapple217/cvrs/pkg/ent/imagedata"
)

// ImageData is the model entity for the ImageData schema.
type ImageData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AvrR holds the value of the "avr_r" field.
	AvrR int `json:"avr_r,omitempty"`
	// AvrG holds the value of the "avr_g" field.
	AvrG int `json:"avr_g,omitempty"`
	// AvrB holds the value of the "avr_b" field.
	AvrB int `json:"avr_b,omitempty"`
	// AvgBrightness holds the value of the "avg_brightness" field.
	AvgBrightness int `json:"avg_brightness,omitempty"`
	// AvgSaturation holds the value of the "avg_saturation" field.
	AvgSaturation int `json:"avg_saturation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitzero"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageDataQuery when eager-loading is set.
	Edges        ImageDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ImageDataEdges holds the relations/edges for other nodes in the graph.
type ImageDataEdges struct {
	// Image holds the value of the image edge.
	Image []*Image `json:"image,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading.
func (e ImageDataEdges) ImageOrErr() ([]*Image, error) {
	if e.loadedTypes[0] {
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImageData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case imagedata.FieldID, imagedata.FieldAvrR, imagedata.FieldAvrG, imagedata.FieldAvrB, imagedata.FieldAvgBrightness, imagedata.FieldAvgSaturation:
			values[i] = new(sql.NullInt64)
		case imagedata.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImageData fields.
func (id *ImageData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case imagedata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			id.ID = int(value.Int64)
		case imagedata.FieldAvrR:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field avr_r", values[i])
			} else if value.Valid {
				id.AvrR = int(value.Int64)
			}
		case imagedata.FieldAvrG:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field avr_g", values[i])
			} else if value.Valid {
				id.AvrG = int(value.Int64)
			}
		case imagedata.FieldAvrB:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field avr_b", values[i])
			} else if value.Valid {
				id.AvrB = int(value.Int64)
			}
		case imagedata.FieldAvgBrightness:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_brightness", values[i])
			} else if value.Valid {
				id.AvgBrightness = int(value.Int64)
			}
		case imagedata.FieldAvgSaturation:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field avg_saturation", values[i])
			} else if value.Valid {
				id.AvgSaturation = int(value.Int64)
			}
		case imagedata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				id.CreatedAt = value.Time
			}
		default:
			id.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImageData.
// This includes values selected through modifiers, order, etc.
func (id *ImageData) Value(name string) (ent.Value, error) {
	return id.selectValues.Get(name)
}

// QueryImage queries the "image" edge of the ImageData entity.
func (id *ImageData) QueryImage() *ImageQuery {
	return NewImageDataClient(id.config).QueryImage(id)
}

// Update returns a builder for updating this ImageData.
// Note that you need to call ImageData.Unwrap() before calling this method if this ImageData
// was returned from a transaction, and the transaction was committed or rolled back.
func (id *ImageData) Update() *ImageDataUpdateOne {
	return NewImageDataClient(id.config).UpdateOne(id)
}

// Unwrap unwraps the ImageData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (id *ImageData) Unwrap() *ImageData {
	_tx, ok := id.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImageData is not a transactional entity")
	}
	id.config.driver = _tx.drv
	return id
}

// String implements the fmt.Stringer.
func (id *ImageData) String() string {
	var builder strings.Builder
	builder.WriteString("ImageData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", id.ID))
	builder.WriteString("avr_r=")
	builder.WriteString(fmt.Sprintf("%v", id.AvrR))
	builder.WriteString(", ")
	builder.WriteString("avr_g=")
	builder.WriteString(fmt.Sprintf("%v", id.AvrG))
	builder.WriteString(", ")
	builder.WriteString("avr_b=")
	builder.WriteString(fmt.Sprintf("%v", id.AvrB))
	builder.WriteString(", ")
	builder.WriteString("avg_brightness=")
	builder.WriteString(fmt.Sprintf("%v", id.AvgBrightness))
	builder.WriteString(", ")
	builder.WriteString("avg_saturation=")
	builder.WriteString(fmt.Sprintf("%v", id.AvgSaturation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(id.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ImageDataSlice is a parsable slice of ImageData.
type ImageDataSlice []*ImageData
