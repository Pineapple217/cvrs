// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/artist"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
	"github.com/Pineapple217/cvrs/pkg/ent/release"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ReleaseUpdate is the builder for updating Release entities.
type ReleaseUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseMutation
}

// Where appends a list predicates to the ReleaseUpdate builder.
func (ru *ReleaseUpdate) Where(ps ...predicate.Release) *ReleaseUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *ReleaseUpdate) SetName(s string) *ReleaseUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableName(s *string) *ReleaseUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetType sets the "type" field.
func (ru *ReleaseUpdate) SetType(r release.Type) *ReleaseUpdate {
	ru.mutation.SetType(r)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableType(r *release.Type) *ReleaseUpdate {
	if r != nil {
		ru.SetType(*r)
	}
	return ru
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (ru *ReleaseUpdate) SetImageID(id pid.ID) *ReleaseUpdate {
	ru.mutation.SetImageID(id)
	return ru
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (ru *ReleaseUpdate) SetNillableImageID(id *pid.ID) *ReleaseUpdate {
	if id != nil {
		ru = ru.SetImageID(*id)
	}
	return ru
}

// SetImage sets the "image" edge to the Image entity.
func (ru *ReleaseUpdate) SetImage(i *Image) *ReleaseUpdate {
	return ru.SetImageID(i.ID)
}

// AddAppearingArtistIDs adds the "appearing_artists" edge to the Artist entity by IDs.
func (ru *ReleaseUpdate) AddAppearingArtistIDs(ids ...pid.ID) *ReleaseUpdate {
	ru.mutation.AddAppearingArtistIDs(ids...)
	return ru
}

// AddAppearingArtists adds the "appearing_artists" edges to the Artist entity.
func (ru *ReleaseUpdate) AddAppearingArtists(a ...*Artist) *ReleaseUpdate {
	ids := make([]pid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddAppearingArtistIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ru *ReleaseUpdate) Mutation() *ReleaseMutation {
	return ru.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (ru *ReleaseUpdate) ClearImage() *ReleaseUpdate {
	ru.mutation.ClearImage()
	return ru
}

// ClearAppearingArtists clears all "appearing_artists" edges to the Artist entity.
func (ru *ReleaseUpdate) ClearAppearingArtists() *ReleaseUpdate {
	ru.mutation.ClearAppearingArtists()
	return ru
}

// RemoveAppearingArtistIDs removes the "appearing_artists" edge to Artist entities by IDs.
func (ru *ReleaseUpdate) RemoveAppearingArtistIDs(ids ...pid.ID) *ReleaseUpdate {
	ru.mutation.RemoveAppearingArtistIDs(ids...)
	return ru
}

// RemoveAppearingArtists removes "appearing_artists" edges to Artist entities.
func (ru *ReleaseUpdate) RemoveAppearingArtists(a ...*Artist) *ReleaseUpdate {
	ids := make([]pid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveAppearingArtistIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReleaseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReleaseUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReleaseUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReleaseUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReleaseUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := release.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Release.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.GetType(); ok {
		if err := release.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Release.type": %w`, err)}
		}
	}
	return nil
}

func (ru *ReleaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(release.Table, release.Columns, sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(release.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.SetField(release.FieldType, field.TypeEnum, value)
	}
	if ru.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   release.ImageTable,
			Columns: []string{release.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   release.ImageTable,
			Columns: []string{release.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AppearingArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.AppearingArtistsTable,
			Columns: release.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		createE := &ReleaseAppearanceCreate{config: ru.config, mutation: newReleaseAppearanceMutation(ru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedAppearingArtistsIDs(); len(nodes) > 0 && !ru.mutation.AppearingArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.AppearingArtistsTable,
			Columns: release.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReleaseAppearanceCreate{config: ru.config, mutation: newReleaseAppearanceMutation(ru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AppearingArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.AppearingArtistsTable,
			Columns: release.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReleaseAppearanceCreate{config: ru.config, mutation: newReleaseAppearanceMutation(ru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReleaseUpdateOne is the builder for updating a single Release entity.
type ReleaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseMutation
}

// SetName sets the "name" field.
func (ruo *ReleaseUpdateOne) SetName(s string) *ReleaseUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableName(s *string) *ReleaseUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetType sets the "type" field.
func (ruo *ReleaseUpdateOne) SetType(r release.Type) *ReleaseUpdateOne {
	ruo.mutation.SetType(r)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableType(r *release.Type) *ReleaseUpdateOne {
	if r != nil {
		ruo.SetType(*r)
	}
	return ruo
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (ruo *ReleaseUpdateOne) SetImageID(id pid.ID) *ReleaseUpdateOne {
	ruo.mutation.SetImageID(id)
	return ruo
}

// SetNillableImageID sets the "image" edge to the Image entity by ID if the given value is not nil.
func (ruo *ReleaseUpdateOne) SetNillableImageID(id *pid.ID) *ReleaseUpdateOne {
	if id != nil {
		ruo = ruo.SetImageID(*id)
	}
	return ruo
}

// SetImage sets the "image" edge to the Image entity.
func (ruo *ReleaseUpdateOne) SetImage(i *Image) *ReleaseUpdateOne {
	return ruo.SetImageID(i.ID)
}

// AddAppearingArtistIDs adds the "appearing_artists" edge to the Artist entity by IDs.
func (ruo *ReleaseUpdateOne) AddAppearingArtistIDs(ids ...pid.ID) *ReleaseUpdateOne {
	ruo.mutation.AddAppearingArtistIDs(ids...)
	return ruo
}

// AddAppearingArtists adds the "appearing_artists" edges to the Artist entity.
func (ruo *ReleaseUpdateOne) AddAppearingArtists(a ...*Artist) *ReleaseUpdateOne {
	ids := make([]pid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddAppearingArtistIDs(ids...)
}

// Mutation returns the ReleaseMutation object of the builder.
func (ruo *ReleaseUpdateOne) Mutation() *ReleaseMutation {
	return ruo.mutation
}

// ClearImage clears the "image" edge to the Image entity.
func (ruo *ReleaseUpdateOne) ClearImage() *ReleaseUpdateOne {
	ruo.mutation.ClearImage()
	return ruo
}

// ClearAppearingArtists clears all "appearing_artists" edges to the Artist entity.
func (ruo *ReleaseUpdateOne) ClearAppearingArtists() *ReleaseUpdateOne {
	ruo.mutation.ClearAppearingArtists()
	return ruo
}

// RemoveAppearingArtistIDs removes the "appearing_artists" edge to Artist entities by IDs.
func (ruo *ReleaseUpdateOne) RemoveAppearingArtistIDs(ids ...pid.ID) *ReleaseUpdateOne {
	ruo.mutation.RemoveAppearingArtistIDs(ids...)
	return ruo
}

// RemoveAppearingArtists removes "appearing_artists" edges to Artist entities.
func (ruo *ReleaseUpdateOne) RemoveAppearingArtists(a ...*Artist) *ReleaseUpdateOne {
	ids := make([]pid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveAppearingArtistIDs(ids...)
}

// Where appends a list predicates to the ReleaseUpdate builder.
func (ruo *ReleaseUpdateOne) Where(ps ...predicate.Release) *ReleaseUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReleaseUpdateOne) Select(field string, fields ...string) *ReleaseUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Release entity.
func (ruo *ReleaseUpdateOne) Save(ctx context.Context) (*Release, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) SaveX(ctx context.Context) *Release {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReleaseUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReleaseUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReleaseUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := release.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Release.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.GetType(); ok {
		if err := release.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Release.type": %w`, err)}
		}
	}
	return nil
}

func (ruo *ReleaseUpdateOne) sqlSave(ctx context.Context) (_node *Release, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(release.Table, release.Columns, sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Release.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, release.FieldID)
		for _, f := range fields {
			if !release.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != release.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(release.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.SetField(release.FieldType, field.TypeEnum, value)
	}
	if ruo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   release.ImageTable,
			Columns: []string{release.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   release.ImageTable,
			Columns: []string{release.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AppearingArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.AppearingArtistsTable,
			Columns: release.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		createE := &ReleaseAppearanceCreate{config: ruo.config, mutation: newReleaseAppearanceMutation(ruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedAppearingArtistsIDs(); len(nodes) > 0 && !ruo.mutation.AppearingArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.AppearingArtistsTable,
			Columns: release.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReleaseAppearanceCreate{config: ruo.config, mutation: newReleaseAppearanceMutation(ruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AppearingArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   release.AppearingArtistsTable,
			Columns: release.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReleaseAppearanceCreate{config: ruo.config, mutation: newReleaseAppearanceMutation(ruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Release{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{release.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
