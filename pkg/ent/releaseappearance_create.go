// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/artist"
	"github.com/Pineapple217/cvrs/pkg/ent/release"
	"github.com/Pineapple217/cvrs/pkg/ent/releaseappearance"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ReleaseAppearanceCreate is the builder for creating a ReleaseAppearance entity.
type ReleaseAppearanceCreate struct {
	config
	mutation *ReleaseAppearanceMutation
	hooks    []Hook
}

// SetReleaseID sets the "release_id" field.
func (rac *ReleaseAppearanceCreate) SetReleaseID(pi pid.ID) *ReleaseAppearanceCreate {
	rac.mutation.SetReleaseID(pi)
	return rac
}

// SetNillableReleaseID sets the "release_id" field if the given value is not nil.
func (rac *ReleaseAppearanceCreate) SetNillableReleaseID(pi *pid.ID) *ReleaseAppearanceCreate {
	if pi != nil {
		rac.SetReleaseID(*pi)
	}
	return rac
}

// SetArtistID sets the "artist_id" field.
func (rac *ReleaseAppearanceCreate) SetArtistID(pi pid.ID) *ReleaseAppearanceCreate {
	rac.mutation.SetArtistID(pi)
	return rac
}

// SetNillableArtistID sets the "artist_id" field if the given value is not nil.
func (rac *ReleaseAppearanceCreate) SetNillableArtistID(pi *pid.ID) *ReleaseAppearanceCreate {
	if pi != nil {
		rac.SetArtistID(*pi)
	}
	return rac
}

// SetOrder sets the "order" field.
func (rac *ReleaseAppearanceCreate) SetOrder(i int) *ReleaseAppearanceCreate {
	rac.mutation.SetOrder(i)
	return rac
}

// SetArtist sets the "artist" edge to the Artist entity.
func (rac *ReleaseAppearanceCreate) SetArtist(a *Artist) *ReleaseAppearanceCreate {
	return rac.SetArtistID(a.ID)
}

// SetRelease sets the "release" edge to the Release entity.
func (rac *ReleaseAppearanceCreate) SetRelease(r *Release) *ReleaseAppearanceCreate {
	return rac.SetReleaseID(r.ID)
}

// Mutation returns the ReleaseAppearanceMutation object of the builder.
func (rac *ReleaseAppearanceCreate) Mutation() *ReleaseAppearanceMutation {
	return rac.mutation
}

// Save creates the ReleaseAppearance in the database.
func (rac *ReleaseAppearanceCreate) Save(ctx context.Context) (*ReleaseAppearance, error) {
	rac.defaults()
	return withHooks(ctx, rac.sqlSave, rac.mutation, rac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rac *ReleaseAppearanceCreate) SaveX(ctx context.Context) *ReleaseAppearance {
	v, err := rac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rac *ReleaseAppearanceCreate) Exec(ctx context.Context) error {
	_, err := rac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rac *ReleaseAppearanceCreate) ExecX(ctx context.Context) {
	if err := rac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rac *ReleaseAppearanceCreate) defaults() {
	if _, ok := rac.mutation.ReleaseID(); !ok {
		v := releaseappearance.DefaultReleaseID()
		rac.mutation.SetReleaseID(v)
	}
	if _, ok := rac.mutation.ArtistID(); !ok {
		v := releaseappearance.DefaultArtistID()
		rac.mutation.SetArtistID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rac *ReleaseAppearanceCreate) check() error {
	if _, ok := rac.mutation.ReleaseID(); !ok {
		return &ValidationError{Name: "release_id", err: errors.New(`ent: missing required field "ReleaseAppearance.release_id"`)}
	}
	if _, ok := rac.mutation.ArtistID(); !ok {
		return &ValidationError{Name: "artist_id", err: errors.New(`ent: missing required field "ReleaseAppearance.artist_id"`)}
	}
	if _, ok := rac.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "ReleaseAppearance.order"`)}
	}
	if v, ok := rac.mutation.Order(); ok {
		if err := releaseappearance.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "ReleaseAppearance.order": %w`, err)}
		}
	}
	if len(rac.mutation.ArtistIDs()) == 0 {
		return &ValidationError{Name: "artist", err: errors.New(`ent: missing required edge "ReleaseAppearance.artist"`)}
	}
	if len(rac.mutation.ReleaseIDs()) == 0 {
		return &ValidationError{Name: "release", err: errors.New(`ent: missing required edge "ReleaseAppearance.release"`)}
	}
	return nil
}

func (rac *ReleaseAppearanceCreate) sqlSave(ctx context.Context) (*ReleaseAppearance, error) {
	if err := rac.check(); err != nil {
		return nil, err
	}
	_node, _spec := rac.createSpec()
	if err := sqlgraph.CreateNode(ctx, rac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (rac *ReleaseAppearanceCreate) createSpec() (*ReleaseAppearance, *sqlgraph.CreateSpec) {
	var (
		_node = &ReleaseAppearance{config: rac.config}
		_spec = sqlgraph.NewCreateSpec(releaseappearance.Table, nil)
	)
	if value, ok := rac.mutation.Order(); ok {
		_spec.SetField(releaseappearance.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if nodes := rac.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaseappearance.ArtistTable,
			Columns: []string{releaseappearance.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArtistID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rac.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   releaseappearance.ReleaseTable,
			Columns: []string{releaseappearance.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReleaseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReleaseAppearanceCreateBulk is the builder for creating many ReleaseAppearance entities in bulk.
type ReleaseAppearanceCreateBulk struct {
	config
	err      error
	builders []*ReleaseAppearanceCreate
}

// Save creates the ReleaseAppearance entities in the database.
func (racb *ReleaseAppearanceCreateBulk) Save(ctx context.Context) ([]*ReleaseAppearance, error) {
	if racb.err != nil {
		return nil, racb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(racb.builders))
	nodes := make([]*ReleaseAppearance, len(racb.builders))
	mutators := make([]Mutator, len(racb.builders))
	for i := range racb.builders {
		func(i int, root context.Context) {
			builder := racb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReleaseAppearanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, racb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, racb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, racb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (racb *ReleaseAppearanceCreateBulk) SaveX(ctx context.Context) []*ReleaseAppearance {
	v, err := racb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (racb *ReleaseAppearanceCreateBulk) Exec(ctx context.Context) error {
	_, err := racb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (racb *ReleaseAppearanceCreateBulk) ExecX(ctx context.Context) {
	if err := racb.Exec(ctx); err != nil {
		panic(err)
	}
}
