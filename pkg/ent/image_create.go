// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/release"
	"github.com/Pineapple217/cvrs/pkg/ent/user"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ImageCreate is the builder for creating a Image entity.
type ImageCreate struct {
	config
	mutation *ImageMutation
	hooks    []Hook
}

// SetFile sets the "file" field.
func (ic *ImageCreate) SetFile(s string) *ImageCreate {
	ic.mutation.SetFile(s)
	return ic
}

// SetType sets the "type" field.
func (ic *ImageCreate) SetType(i image.Type) *ImageCreate {
	ic.mutation.SetType(i)
	return ic
}

// SetNote sets the "note" field.
func (ic *ImageCreate) SetNote(s string) *ImageCreate {
	ic.mutation.SetNote(s)
	return ic
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ic *ImageCreate) SetNillableNote(s *string) *ImageCreate {
	if s != nil {
		ic.SetNote(*s)
	}
	return ic
}

// SetDimentions sets the "dimentions" field.
func (ic *ImageCreate) SetDimentions(i []int) *ImageCreate {
	ic.mutation.SetDimentions(i)
	return ic
}

// SetSizeBits sets the "size_bits" field.
func (ic *ImageCreate) SetSizeBits(u uint32) *ImageCreate {
	ic.mutation.SetSizeBits(u)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *ImageCreate) SetCreatedAt(t time.Time) *ImageCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *ImageCreate) SetNillableCreatedAt(t *time.Time) *ImageCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *ImageCreate) SetUpdatedAt(t time.Time) *ImageCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *ImageCreate) SetNillableUpdatedAt(t *time.Time) *ImageCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetDeletedAt sets the "deleted_at" field.
func (ic *ImageCreate) SetDeletedAt(t time.Time) *ImageCreate {
	ic.mutation.SetDeletedAt(t)
	return ic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ic *ImageCreate) SetNillableDeletedAt(t *time.Time) *ImageCreate {
	if t != nil {
		ic.SetDeletedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *ImageCreate) SetID(pi pid.ID) *ImageCreate {
	ic.mutation.SetID(pi)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *ImageCreate) SetNillableID(pi *pid.ID) *ImageCreate {
	if pi != nil {
		ic.SetID(*pi)
	}
	return ic
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (ic *ImageCreate) SetReleaseID(id pid.ID) *ImageCreate {
	ic.mutation.SetReleaseID(id)
	return ic
}

// SetRelease sets the "release" edge to the Release entity.
func (ic *ImageCreate) SetRelease(r *Release) *ImageCreate {
	return ic.SetReleaseID(r.ID)
}

// SetUploaderID sets the "uploader" edge to the User entity by ID.
func (ic *ImageCreate) SetUploaderID(id pid.ID) *ImageCreate {
	ic.mutation.SetUploaderID(id)
	return ic
}

// SetUploader sets the "uploader" edge to the User entity.
func (ic *ImageCreate) SetUploader(u *User) *ImageCreate {
	return ic.SetUploaderID(u.ID)
}

// Mutation returns the ImageMutation object of the builder.
func (ic *ImageCreate) Mutation() *ImageMutation {
	return ic.mutation
}

// Save creates the Image in the database.
func (ic *ImageCreate) Save(ctx context.Context) (*Image, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImageCreate) SaveX(ctx context.Context) *Image {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImageCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImageCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ImageCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := image.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := image.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := image.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImageCreate) check() error {
	if _, ok := ic.mutation.File(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required field "Image.file"`)}
	}
	if v, ok := ic.mutation.File(); ok {
		if err := image.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "Image.file": %w`, err)}
		}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Image.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := image.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Image.type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Dimentions(); !ok {
		return &ValidationError{Name: "dimentions", err: errors.New(`ent: missing required field "Image.dimentions"`)}
	}
	if _, ok := ic.mutation.SizeBits(); !ok {
		return &ValidationError{Name: "size_bits", err: errors.New(`ent: missing required field "Image.size_bits"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Image.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Image.updated_at"`)}
	}
	if len(ic.mutation.ReleaseIDs()) == 0 {
		return &ValidationError{Name: "release", err: errors.New(`ent: missing required edge "Image.release"`)}
	}
	if len(ic.mutation.UploaderIDs()) == 0 {
		return &ValidationError{Name: "uploader", err: errors.New(`ent: missing required edge "Image.uploader"`)}
	}
	return nil
}

func (ic *ImageCreate) sqlSave(ctx context.Context) (*Image, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = pid.ID(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImageCreate) createSpec() (*Image, *sqlgraph.CreateSpec) {
	var (
		_node = &Image{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(image.Table, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.File(); ok {
		_spec.SetField(image.FieldFile, field.TypeString, value)
		_node.File = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(image.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.Note(); ok {
		_spec.SetField(image.FieldNote, field.TypeString, value)
		_node.Note = &value
	}
	if value, ok := ic.mutation.Dimentions(); ok {
		_spec.SetField(image.FieldDimentions, field.TypeJSON, value)
		_node.Dimentions = value
	}
	if value, ok := ic.mutation.SizeBits(); ok {
		_spec.SetField(image.FieldSizeBits, field.TypeUint32, value)
		_node.SizeBits = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(image.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(image.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.SetField(image.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := ic.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   image.ReleaseTable,
			Columns: []string{image.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.release_image = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.UploaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploaderTable,
			Columns: []string{image.UploaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageCreateBulk is the builder for creating many Image entities in bulk.
type ImageCreateBulk struct {
	config
	err      error
	builders []*ImageCreate
}

// Save creates the Image entities in the database.
func (icb *ImageCreateBulk) Save(ctx context.Context) ([]*Image, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Image, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = pid.ID(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImageCreateBulk) SaveX(ctx context.Context) []*Image {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImageCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImageCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
