// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/ent/artist"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
	"github.com/Pineapple217/cvrs/pkg/ent/track"
	"github.com/Pineapple217/cvrs/pkg/ent/trackappearance"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// TrackAppearanceQuery is the builder for querying TrackAppearance entities.
type TrackAppearanceQuery struct {
	config
	ctx        *QueryContext
	order      []trackappearance.OrderOption
	inters     []Interceptor
	predicates []predicate.TrackAppearance
	withArtist *ArtistQuery
	withTrack  *TrackQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TrackAppearanceQuery builder.
func (taq *TrackAppearanceQuery) Where(ps ...predicate.TrackAppearance) *TrackAppearanceQuery {
	taq.predicates = append(taq.predicates, ps...)
	return taq
}

// Limit the number of records to be returned by this query.
func (taq *TrackAppearanceQuery) Limit(limit int) *TrackAppearanceQuery {
	taq.ctx.Limit = &limit
	return taq
}

// Offset to start from.
func (taq *TrackAppearanceQuery) Offset(offset int) *TrackAppearanceQuery {
	taq.ctx.Offset = &offset
	return taq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (taq *TrackAppearanceQuery) Unique(unique bool) *TrackAppearanceQuery {
	taq.ctx.Unique = &unique
	return taq
}

// Order specifies how the records should be ordered.
func (taq *TrackAppearanceQuery) Order(o ...trackappearance.OrderOption) *TrackAppearanceQuery {
	taq.order = append(taq.order, o...)
	return taq
}

// QueryArtist chains the current query on the "artist" edge.
func (taq *TrackAppearanceQuery) QueryArtist() *ArtistQuery {
	query := (&ArtistClient{config: taq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := taq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := taq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trackappearance.Table, trackappearance.ArtistColumn, selector),
			sqlgraph.To(artist.Table, artist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trackappearance.ArtistTable, trackappearance.ArtistColumn),
		)
		fromU = sqlgraph.SetNeighbors(taq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrack chains the current query on the "track" edge.
func (taq *TrackAppearanceQuery) QueryTrack() *TrackQuery {
	query := (&TrackClient{config: taq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := taq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := taq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trackappearance.Table, trackappearance.TrackColumn, selector),
			sqlgraph.To(track.Table, track.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, trackappearance.TrackTable, trackappearance.TrackColumn),
		)
		fromU = sqlgraph.SetNeighbors(taq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TrackAppearance entity from the query.
// Returns a *NotFoundError when no TrackAppearance was found.
func (taq *TrackAppearanceQuery) First(ctx context.Context) (*TrackAppearance, error) {
	nodes, err := taq.Limit(1).All(setContextOp(ctx, taq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{trackappearance.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (taq *TrackAppearanceQuery) FirstX(ctx context.Context) *TrackAppearance {
	node, err := taq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single TrackAppearance entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TrackAppearance entity is found.
// Returns a *NotFoundError when no TrackAppearance entities are found.
func (taq *TrackAppearanceQuery) Only(ctx context.Context) (*TrackAppearance, error) {
	nodes, err := taq.Limit(2).All(setContextOp(ctx, taq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{trackappearance.Label}
	default:
		return nil, &NotSingularError{trackappearance.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (taq *TrackAppearanceQuery) OnlyX(ctx context.Context) *TrackAppearance {
	node, err := taq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of TrackAppearances.
func (taq *TrackAppearanceQuery) All(ctx context.Context) ([]*TrackAppearance, error) {
	ctx = setContextOp(ctx, taq.ctx, ent.OpQueryAll)
	if err := taq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TrackAppearance, *TrackAppearanceQuery]()
	return withInterceptors[[]*TrackAppearance](ctx, taq, qr, taq.inters)
}

// AllX is like All, but panics if an error occurs.
func (taq *TrackAppearanceQuery) AllX(ctx context.Context) []*TrackAppearance {
	nodes, err := taq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (taq *TrackAppearanceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, taq.ctx, ent.OpQueryCount)
	if err := taq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, taq, querierCount[*TrackAppearanceQuery](), taq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (taq *TrackAppearanceQuery) CountX(ctx context.Context) int {
	count, err := taq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (taq *TrackAppearanceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, taq.ctx, ent.OpQueryExist)
	switch _, err := taq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (taq *TrackAppearanceQuery) ExistX(ctx context.Context) bool {
	exist, err := taq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TrackAppearanceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (taq *TrackAppearanceQuery) Clone() *TrackAppearanceQuery {
	if taq == nil {
		return nil
	}
	return &TrackAppearanceQuery{
		config:     taq.config,
		ctx:        taq.ctx.Clone(),
		order:      append([]trackappearance.OrderOption{}, taq.order...),
		inters:     append([]Interceptor{}, taq.inters...),
		predicates: append([]predicate.TrackAppearance{}, taq.predicates...),
		withArtist: taq.withArtist.Clone(),
		withTrack:  taq.withTrack.Clone(),
		// clone intermediate query.
		sql:  taq.sql.Clone(),
		path: taq.path,
	}
}

// WithArtist tells the query-builder to eager-load the nodes that are connected to
// the "artist" edge. The optional arguments are used to configure the query builder of the edge.
func (taq *TrackAppearanceQuery) WithArtist(opts ...func(*ArtistQuery)) *TrackAppearanceQuery {
	query := (&ArtistClient{config: taq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	taq.withArtist = query
	return taq
}

// WithTrack tells the query-builder to eager-load the nodes that are connected to
// the "track" edge. The optional arguments are used to configure the query builder of the edge.
func (taq *TrackAppearanceQuery) WithTrack(opts ...func(*TrackQuery)) *TrackAppearanceQuery {
	query := (&TrackClient{config: taq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	taq.withTrack = query
	return taq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TrackID pid.ID `json:"track_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TrackAppearance.Query().
//		GroupBy(trackappearance.FieldTrackID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (taq *TrackAppearanceQuery) GroupBy(field string, fields ...string) *TrackAppearanceGroupBy {
	taq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TrackAppearanceGroupBy{build: taq}
	grbuild.flds = &taq.ctx.Fields
	grbuild.label = trackappearance.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TrackID pid.ID `json:"track_id,omitempty"`
//	}
//
//	client.TrackAppearance.Query().
//		Select(trackappearance.FieldTrackID).
//		Scan(ctx, &v)
func (taq *TrackAppearanceQuery) Select(fields ...string) *TrackAppearanceSelect {
	taq.ctx.Fields = append(taq.ctx.Fields, fields...)
	sbuild := &TrackAppearanceSelect{TrackAppearanceQuery: taq}
	sbuild.label = trackappearance.Label
	sbuild.flds, sbuild.scan = &taq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TrackAppearanceSelect configured with the given aggregations.
func (taq *TrackAppearanceQuery) Aggregate(fns ...AggregateFunc) *TrackAppearanceSelect {
	return taq.Select().Aggregate(fns...)
}

func (taq *TrackAppearanceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range taq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, taq); err != nil {
				return err
			}
		}
	}
	for _, f := range taq.ctx.Fields {
		if !trackappearance.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if taq.path != nil {
		prev, err := taq.path(ctx)
		if err != nil {
			return err
		}
		taq.sql = prev
	}
	return nil
}

func (taq *TrackAppearanceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TrackAppearance, error) {
	var (
		nodes       = []*TrackAppearance{}
		_spec       = taq.querySpec()
		loadedTypes = [2]bool{
			taq.withArtist != nil,
			taq.withTrack != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TrackAppearance).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TrackAppearance{config: taq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, taq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := taq.withArtist; query != nil {
		if err := taq.loadArtist(ctx, query, nodes, nil,
			func(n *TrackAppearance, e *Artist) { n.Edges.Artist = e }); err != nil {
			return nil, err
		}
	}
	if query := taq.withTrack; query != nil {
		if err := taq.loadTrack(ctx, query, nodes, nil,
			func(n *TrackAppearance, e *Track) { n.Edges.Track = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (taq *TrackAppearanceQuery) loadArtist(ctx context.Context, query *ArtistQuery, nodes []*TrackAppearance, init func(*TrackAppearance), assign func(*TrackAppearance, *Artist)) error {
	ids := make([]pid.ID, 0, len(nodes))
	nodeids := make(map[pid.ID][]*TrackAppearance)
	for i := range nodes {
		fk := nodes[i].ArtistID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(artist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "artist_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (taq *TrackAppearanceQuery) loadTrack(ctx context.Context, query *TrackQuery, nodes []*TrackAppearance, init func(*TrackAppearance), assign func(*TrackAppearance, *Track)) error {
	ids := make([]pid.ID, 0, len(nodes))
	nodeids := make(map[pid.ID][]*TrackAppearance)
	for i := range nodes {
		fk := nodes[i].TrackID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(track.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "track_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (taq *TrackAppearanceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := taq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, taq.driver, _spec)
}

func (taq *TrackAppearanceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(trackappearance.Table, trackappearance.Columns, nil)
	_spec.From = taq.sql
	if unique := taq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if taq.path != nil {
		_spec.Unique = true
	}
	if fields := taq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if taq.withArtist != nil {
			_spec.Node.AddColumnOnce(trackappearance.FieldArtistID)
		}
		if taq.withTrack != nil {
			_spec.Node.AddColumnOnce(trackappearance.FieldTrackID)
		}
	}
	if ps := taq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := taq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := taq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := taq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (taq *TrackAppearanceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(taq.driver.Dialect())
	t1 := builder.Table(trackappearance.Table)
	columns := taq.ctx.Fields
	if len(columns) == 0 {
		columns = trackappearance.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if taq.sql != nil {
		selector = taq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if taq.ctx.Unique != nil && *taq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range taq.predicates {
		p(selector)
	}
	for _, p := range taq.order {
		p(selector)
	}
	if offset := taq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := taq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TrackAppearanceGroupBy is the group-by builder for TrackAppearance entities.
type TrackAppearanceGroupBy struct {
	selector
	build *TrackAppearanceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tagb *TrackAppearanceGroupBy) Aggregate(fns ...AggregateFunc) *TrackAppearanceGroupBy {
	tagb.fns = append(tagb.fns, fns...)
	return tagb
}

// Scan applies the selector query and scans the result into the given value.
func (tagb *TrackAppearanceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tagb.build.ctx, ent.OpQueryGroupBy)
	if err := tagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrackAppearanceQuery, *TrackAppearanceGroupBy](ctx, tagb.build, tagb, tagb.build.inters, v)
}

func (tagb *TrackAppearanceGroupBy) sqlScan(ctx context.Context, root *TrackAppearanceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tagb.fns))
	for _, fn := range tagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tagb.flds)+len(tagb.fns))
		for _, f := range *tagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TrackAppearanceSelect is the builder for selecting fields of TrackAppearance entities.
type TrackAppearanceSelect struct {
	*TrackAppearanceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tas *TrackAppearanceSelect) Aggregate(fns ...AggregateFunc) *TrackAppearanceSelect {
	tas.fns = append(tas.fns, fns...)
	return tas
}

// Scan applies the selector query and scans the result into the given value.
func (tas *TrackAppearanceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tas.ctx, ent.OpQuerySelect)
	if err := tas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrackAppearanceQuery, *TrackAppearanceSelect](ctx, tas.TrackAppearanceQuery, tas, tas.inters, v)
}

func (tas *TrackAppearanceSelect) sqlScan(ctx context.Context, root *TrackAppearanceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tas.fns))
	for _, fn := range tas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
