// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
	"github.com/Pineapple217/cvrs/pkg/ent/processedimage"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ProcessedImageUpdate is the builder for updating ProcessedImage entities.
type ProcessedImageUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessedImageMutation
}

// Where appends a list predicates to the ProcessedImageUpdate builder.
func (piu *ProcessedImageUpdate) Where(ps ...predicate.ProcessedImage) *ProcessedImageUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetType sets the "type" field.
func (piu *ProcessedImageUpdate) SetType(pr processedimage.Type) *ProcessedImageUpdate {
	piu.mutation.SetType(pr)
	return piu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (piu *ProcessedImageUpdate) SetNillableType(pr *processedimage.Type) *ProcessedImageUpdate {
	if pr != nil {
		piu.SetType(*pr)
	}
	return piu
}

// SetDimentions sets the "dimentions" field.
func (piu *ProcessedImageUpdate) SetDimentions(i int) *ProcessedImageUpdate {
	piu.mutation.ResetDimentions()
	piu.mutation.SetDimentions(i)
	return piu
}

// SetNillableDimentions sets the "dimentions" field if the given value is not nil.
func (piu *ProcessedImageUpdate) SetNillableDimentions(i *int) *ProcessedImageUpdate {
	if i != nil {
		piu.SetDimentions(*i)
	}
	return piu
}

// AddDimentions adds i to the "dimentions" field.
func (piu *ProcessedImageUpdate) AddDimentions(i int) *ProcessedImageUpdate {
	piu.mutation.AddDimentions(i)
	return piu
}

// SetSizeBits sets the "size_bits" field.
func (piu *ProcessedImageUpdate) SetSizeBits(u uint32) *ProcessedImageUpdate {
	piu.mutation.ResetSizeBits()
	piu.mutation.SetSizeBits(u)
	return piu
}

// SetNillableSizeBits sets the "size_bits" field if the given value is not nil.
func (piu *ProcessedImageUpdate) SetNillableSizeBits(u *uint32) *ProcessedImageUpdate {
	if u != nil {
		piu.SetSizeBits(*u)
	}
	return piu
}

// AddSizeBits adds u to the "size_bits" field.
func (piu *ProcessedImageUpdate) AddSizeBits(u int32) *ProcessedImageUpdate {
	piu.mutation.AddSizeBits(u)
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *ProcessedImageUpdate) SetUpdatedAt(t time.Time) *ProcessedImageUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetDeletedAt sets the "deleted_at" field.
func (piu *ProcessedImageUpdate) SetDeletedAt(t time.Time) *ProcessedImageUpdate {
	piu.mutation.SetDeletedAt(t)
	return piu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (piu *ProcessedImageUpdate) SetNillableDeletedAt(t *time.Time) *ProcessedImageUpdate {
	if t != nil {
		piu.SetDeletedAt(*t)
	}
	return piu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (piu *ProcessedImageUpdate) ClearDeletedAt() *ProcessedImageUpdate {
	piu.mutation.ClearDeletedAt()
	return piu
}

// SetSourceID sets the "source" edge to the Image entity by ID.
func (piu *ProcessedImageUpdate) SetSourceID(id pid.ID) *ProcessedImageUpdate {
	piu.mutation.SetSourceID(id)
	return piu
}

// SetSource sets the "source" edge to the Image entity.
func (piu *ProcessedImageUpdate) SetSource(i *Image) *ProcessedImageUpdate {
	return piu.SetSourceID(i.ID)
}

// Mutation returns the ProcessedImageMutation object of the builder.
func (piu *ProcessedImageUpdate) Mutation() *ProcessedImageMutation {
	return piu.mutation
}

// ClearSource clears the "source" edge to the Image entity.
func (piu *ProcessedImageUpdate) ClearSource() *ProcessedImageUpdate {
	piu.mutation.ClearSource()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProcessedImageUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProcessedImageUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProcessedImageUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProcessedImageUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *ProcessedImageUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := processedimage.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProcessedImageUpdate) check() error {
	if v, ok := piu.mutation.GetType(); ok {
		if err := processedimage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProcessedImage.type": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Dimentions(); ok {
		if err := processedimage.DimentionsValidator(v); err != nil {
			return &ValidationError{Name: "dimentions", err: fmt.Errorf(`ent: validator failed for field "ProcessedImage.dimentions": %w`, err)}
		}
	}
	if piu.mutation.SourceCleared() && len(piu.mutation.SourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProcessedImage.source"`)
	}
	return nil
}

func (piu *ProcessedImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processedimage.Table, processedimage.Columns, sqlgraph.NewFieldSpec(processedimage.FieldID, field.TypeInt64))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.GetType(); ok {
		_spec.SetField(processedimage.FieldType, field.TypeEnum, value)
	}
	if value, ok := piu.mutation.Dimentions(); ok {
		_spec.SetField(processedimage.FieldDimentions, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedDimentions(); ok {
		_spec.AddField(processedimage.FieldDimentions, field.TypeInt, value)
	}
	if value, ok := piu.mutation.SizeBits(); ok {
		_spec.SetField(processedimage.FieldSizeBits, field.TypeUint32, value)
	}
	if value, ok := piu.mutation.AddedSizeBits(); ok {
		_spec.AddField(processedimage.FieldSizeBits, field.TypeUint32, value)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(processedimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := piu.mutation.DeletedAt(); ok {
		_spec.SetField(processedimage.FieldDeletedAt, field.TypeTime, value)
	}
	if piu.mutation.DeletedAtCleared() {
		_spec.ClearField(processedimage.FieldDeletedAt, field.TypeTime)
	}
	if piu.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   processedimage.SourceTable,
			Columns: []string{processedimage.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   processedimage.SourceTable,
			Columns: []string{processedimage.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processedimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProcessedImageUpdateOne is the builder for updating a single ProcessedImage entity.
type ProcessedImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessedImageMutation
}

// SetType sets the "type" field.
func (piuo *ProcessedImageUpdateOne) SetType(pr processedimage.Type) *ProcessedImageUpdateOne {
	piuo.mutation.SetType(pr)
	return piuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (piuo *ProcessedImageUpdateOne) SetNillableType(pr *processedimage.Type) *ProcessedImageUpdateOne {
	if pr != nil {
		piuo.SetType(*pr)
	}
	return piuo
}

// SetDimentions sets the "dimentions" field.
func (piuo *ProcessedImageUpdateOne) SetDimentions(i int) *ProcessedImageUpdateOne {
	piuo.mutation.ResetDimentions()
	piuo.mutation.SetDimentions(i)
	return piuo
}

// SetNillableDimentions sets the "dimentions" field if the given value is not nil.
func (piuo *ProcessedImageUpdateOne) SetNillableDimentions(i *int) *ProcessedImageUpdateOne {
	if i != nil {
		piuo.SetDimentions(*i)
	}
	return piuo
}

// AddDimentions adds i to the "dimentions" field.
func (piuo *ProcessedImageUpdateOne) AddDimentions(i int) *ProcessedImageUpdateOne {
	piuo.mutation.AddDimentions(i)
	return piuo
}

// SetSizeBits sets the "size_bits" field.
func (piuo *ProcessedImageUpdateOne) SetSizeBits(u uint32) *ProcessedImageUpdateOne {
	piuo.mutation.ResetSizeBits()
	piuo.mutation.SetSizeBits(u)
	return piuo
}

// SetNillableSizeBits sets the "size_bits" field if the given value is not nil.
func (piuo *ProcessedImageUpdateOne) SetNillableSizeBits(u *uint32) *ProcessedImageUpdateOne {
	if u != nil {
		piuo.SetSizeBits(*u)
	}
	return piuo
}

// AddSizeBits adds u to the "size_bits" field.
func (piuo *ProcessedImageUpdateOne) AddSizeBits(u int32) *ProcessedImageUpdateOne {
	piuo.mutation.AddSizeBits(u)
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *ProcessedImageUpdateOne) SetUpdatedAt(t time.Time) *ProcessedImageUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetDeletedAt sets the "deleted_at" field.
func (piuo *ProcessedImageUpdateOne) SetDeletedAt(t time.Time) *ProcessedImageUpdateOne {
	piuo.mutation.SetDeletedAt(t)
	return piuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (piuo *ProcessedImageUpdateOne) SetNillableDeletedAt(t *time.Time) *ProcessedImageUpdateOne {
	if t != nil {
		piuo.SetDeletedAt(*t)
	}
	return piuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (piuo *ProcessedImageUpdateOne) ClearDeletedAt() *ProcessedImageUpdateOne {
	piuo.mutation.ClearDeletedAt()
	return piuo
}

// SetSourceID sets the "source" edge to the Image entity by ID.
func (piuo *ProcessedImageUpdateOne) SetSourceID(id pid.ID) *ProcessedImageUpdateOne {
	piuo.mutation.SetSourceID(id)
	return piuo
}

// SetSource sets the "source" edge to the Image entity.
func (piuo *ProcessedImageUpdateOne) SetSource(i *Image) *ProcessedImageUpdateOne {
	return piuo.SetSourceID(i.ID)
}

// Mutation returns the ProcessedImageMutation object of the builder.
func (piuo *ProcessedImageUpdateOne) Mutation() *ProcessedImageMutation {
	return piuo.mutation
}

// ClearSource clears the "source" edge to the Image entity.
func (piuo *ProcessedImageUpdateOne) ClearSource() *ProcessedImageUpdateOne {
	piuo.mutation.ClearSource()
	return piuo
}

// Where appends a list predicates to the ProcessedImageUpdate builder.
func (piuo *ProcessedImageUpdateOne) Where(ps ...predicate.ProcessedImage) *ProcessedImageUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProcessedImageUpdateOne) Select(field string, fields ...string) *ProcessedImageUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProcessedImage entity.
func (piuo *ProcessedImageUpdateOne) Save(ctx context.Context) (*ProcessedImage, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProcessedImageUpdateOne) SaveX(ctx context.Context) *ProcessedImage {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProcessedImageUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProcessedImageUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *ProcessedImageUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := processedimage.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProcessedImageUpdateOne) check() error {
	if v, ok := piuo.mutation.GetType(); ok {
		if err := processedimage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProcessedImage.type": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Dimentions(); ok {
		if err := processedimage.DimentionsValidator(v); err != nil {
			return &ValidationError{Name: "dimentions", err: fmt.Errorf(`ent: validator failed for field "ProcessedImage.dimentions": %w`, err)}
		}
	}
	if piuo.mutation.SourceCleared() && len(piuo.mutation.SourceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProcessedImage.source"`)
	}
	return nil
}

func (piuo *ProcessedImageUpdateOne) sqlSave(ctx context.Context) (_node *ProcessedImage, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processedimage.Table, processedimage.Columns, sqlgraph.NewFieldSpec(processedimage.FieldID, field.TypeInt64))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessedImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processedimage.FieldID)
		for _, f := range fields {
			if !processedimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processedimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.GetType(); ok {
		_spec.SetField(processedimage.FieldType, field.TypeEnum, value)
	}
	if value, ok := piuo.mutation.Dimentions(); ok {
		_spec.SetField(processedimage.FieldDimentions, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedDimentions(); ok {
		_spec.AddField(processedimage.FieldDimentions, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.SizeBits(); ok {
		_spec.SetField(processedimage.FieldSizeBits, field.TypeUint32, value)
	}
	if value, ok := piuo.mutation.AddedSizeBits(); ok {
		_spec.AddField(processedimage.FieldSizeBits, field.TypeUint32, value)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(processedimage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.DeletedAt(); ok {
		_spec.SetField(processedimage.FieldDeletedAt, field.TypeTime, value)
	}
	if piuo.mutation.DeletedAtCleared() {
		_spec.ClearField(processedimage.FieldDeletedAt, field.TypeTime)
	}
	if piuo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   processedimage.SourceTable,
			Columns: []string{processedimage.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   processedimage.SourceTable,
			Columns: []string{processedimage.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProcessedImage{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processedimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
