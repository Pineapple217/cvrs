// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/imagedata"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ImageDataUpdate is the builder for updating ImageData entities.
type ImageDataUpdate struct {
	config
	hooks    []Hook
	mutation *ImageDataMutation
}

// Where appends a list predicates to the ImageDataUpdate builder.
func (idu *ImageDataUpdate) Where(ps ...predicate.ImageData) *ImageDataUpdate {
	idu.mutation.Where(ps...)
	return idu
}

// SetAvrR sets the "avr_r" field.
func (idu *ImageDataUpdate) SetAvrR(i int) *ImageDataUpdate {
	idu.mutation.ResetAvrR()
	idu.mutation.SetAvrR(i)
	return idu
}

// SetNillableAvrR sets the "avr_r" field if the given value is not nil.
func (idu *ImageDataUpdate) SetNillableAvrR(i *int) *ImageDataUpdate {
	if i != nil {
		idu.SetAvrR(*i)
	}
	return idu
}

// AddAvrR adds i to the "avr_r" field.
func (idu *ImageDataUpdate) AddAvrR(i int) *ImageDataUpdate {
	idu.mutation.AddAvrR(i)
	return idu
}

// SetAvrG sets the "avr_g" field.
func (idu *ImageDataUpdate) SetAvrG(i int) *ImageDataUpdate {
	idu.mutation.ResetAvrG()
	idu.mutation.SetAvrG(i)
	return idu
}

// SetNillableAvrG sets the "avr_g" field if the given value is not nil.
func (idu *ImageDataUpdate) SetNillableAvrG(i *int) *ImageDataUpdate {
	if i != nil {
		idu.SetAvrG(*i)
	}
	return idu
}

// AddAvrG adds i to the "avr_g" field.
func (idu *ImageDataUpdate) AddAvrG(i int) *ImageDataUpdate {
	idu.mutation.AddAvrG(i)
	return idu
}

// SetAvrB sets the "avr_b" field.
func (idu *ImageDataUpdate) SetAvrB(i int) *ImageDataUpdate {
	idu.mutation.ResetAvrB()
	idu.mutation.SetAvrB(i)
	return idu
}

// SetNillableAvrB sets the "avr_b" field if the given value is not nil.
func (idu *ImageDataUpdate) SetNillableAvrB(i *int) *ImageDataUpdate {
	if i != nil {
		idu.SetAvrB(*i)
	}
	return idu
}

// AddAvrB adds i to the "avr_b" field.
func (idu *ImageDataUpdate) AddAvrB(i int) *ImageDataUpdate {
	idu.mutation.AddAvrB(i)
	return idu
}

// SetAvgBrightness sets the "avg_brightness" field.
func (idu *ImageDataUpdate) SetAvgBrightness(i int) *ImageDataUpdate {
	idu.mutation.ResetAvgBrightness()
	idu.mutation.SetAvgBrightness(i)
	return idu
}

// SetNillableAvgBrightness sets the "avg_brightness" field if the given value is not nil.
func (idu *ImageDataUpdate) SetNillableAvgBrightness(i *int) *ImageDataUpdate {
	if i != nil {
		idu.SetAvgBrightness(*i)
	}
	return idu
}

// AddAvgBrightness adds i to the "avg_brightness" field.
func (idu *ImageDataUpdate) AddAvgBrightness(i int) *ImageDataUpdate {
	idu.mutation.AddAvgBrightness(i)
	return idu
}

// SetAvgSaturation sets the "avg_saturation" field.
func (idu *ImageDataUpdate) SetAvgSaturation(i int) *ImageDataUpdate {
	idu.mutation.ResetAvgSaturation()
	idu.mutation.SetAvgSaturation(i)
	return idu
}

// SetNillableAvgSaturation sets the "avg_saturation" field if the given value is not nil.
func (idu *ImageDataUpdate) SetNillableAvgSaturation(i *int) *ImageDataUpdate {
	if i != nil {
		idu.SetAvgSaturation(*i)
	}
	return idu
}

// AddAvgSaturation adds i to the "avg_saturation" field.
func (idu *ImageDataUpdate) AddAvgSaturation(i int) *ImageDataUpdate {
	idu.mutation.AddAvgSaturation(i)
	return idu
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (idu *ImageDataUpdate) AddImageIDs(ids ...pid.ID) *ImageDataUpdate {
	idu.mutation.AddImageIDs(ids...)
	return idu
}

// AddImage adds the "image" edges to the Image entity.
func (idu *ImageDataUpdate) AddImage(i ...*Image) *ImageDataUpdate {
	ids := make([]pid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idu.AddImageIDs(ids...)
}

// Mutation returns the ImageDataMutation object of the builder.
func (idu *ImageDataUpdate) Mutation() *ImageDataMutation {
	return idu.mutation
}

// ClearImage clears all "image" edges to the Image entity.
func (idu *ImageDataUpdate) ClearImage() *ImageDataUpdate {
	idu.mutation.ClearImage()
	return idu
}

// RemoveImageIDs removes the "image" edge to Image entities by IDs.
func (idu *ImageDataUpdate) RemoveImageIDs(ids ...pid.ID) *ImageDataUpdate {
	idu.mutation.RemoveImageIDs(ids...)
	return idu
}

// RemoveImage removes "image" edges to Image entities.
func (idu *ImageDataUpdate) RemoveImage(i ...*Image) *ImageDataUpdate {
	ids := make([]pid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idu.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (idu *ImageDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, idu.sqlSave, idu.mutation, idu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (idu *ImageDataUpdate) SaveX(ctx context.Context) int {
	affected, err := idu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (idu *ImageDataUpdate) Exec(ctx context.Context) error {
	_, err := idu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idu *ImageDataUpdate) ExecX(ctx context.Context) {
	if err := idu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (idu *ImageDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(imagedata.Table, imagedata.Columns, sqlgraph.NewFieldSpec(imagedata.FieldID, field.TypeInt))
	if ps := idu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := idu.mutation.AvrR(); ok {
		_spec.SetField(imagedata.FieldAvrR, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AddedAvrR(); ok {
		_spec.AddField(imagedata.FieldAvrR, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AvrG(); ok {
		_spec.SetField(imagedata.FieldAvrG, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AddedAvrG(); ok {
		_spec.AddField(imagedata.FieldAvrG, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AvrB(); ok {
		_spec.SetField(imagedata.FieldAvrB, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AddedAvrB(); ok {
		_spec.AddField(imagedata.FieldAvrB, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AvgBrightness(); ok {
		_spec.SetField(imagedata.FieldAvgBrightness, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AddedAvgBrightness(); ok {
		_spec.AddField(imagedata.FieldAvgBrightness, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AvgSaturation(); ok {
		_spec.SetField(imagedata.FieldAvgSaturation, field.TypeInt, value)
	}
	if value, ok := idu.mutation.AddedAvgSaturation(); ok {
		_spec.AddField(imagedata.FieldAvgSaturation, field.TypeInt, value)
	}
	if idu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagedata.ImageTable,
			Columns: []string{imagedata.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idu.mutation.RemovedImageIDs(); len(nodes) > 0 && !idu.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagedata.ImageTable,
			Columns: []string{imagedata.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := idu.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagedata.ImageTable,
			Columns: []string{imagedata.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, idu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	idu.mutation.done = true
	return n, nil
}

// ImageDataUpdateOne is the builder for updating a single ImageData entity.
type ImageDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageDataMutation
}

// SetAvrR sets the "avr_r" field.
func (iduo *ImageDataUpdateOne) SetAvrR(i int) *ImageDataUpdateOne {
	iduo.mutation.ResetAvrR()
	iduo.mutation.SetAvrR(i)
	return iduo
}

// SetNillableAvrR sets the "avr_r" field if the given value is not nil.
func (iduo *ImageDataUpdateOne) SetNillableAvrR(i *int) *ImageDataUpdateOne {
	if i != nil {
		iduo.SetAvrR(*i)
	}
	return iduo
}

// AddAvrR adds i to the "avr_r" field.
func (iduo *ImageDataUpdateOne) AddAvrR(i int) *ImageDataUpdateOne {
	iduo.mutation.AddAvrR(i)
	return iduo
}

// SetAvrG sets the "avr_g" field.
func (iduo *ImageDataUpdateOne) SetAvrG(i int) *ImageDataUpdateOne {
	iduo.mutation.ResetAvrG()
	iduo.mutation.SetAvrG(i)
	return iduo
}

// SetNillableAvrG sets the "avr_g" field if the given value is not nil.
func (iduo *ImageDataUpdateOne) SetNillableAvrG(i *int) *ImageDataUpdateOne {
	if i != nil {
		iduo.SetAvrG(*i)
	}
	return iduo
}

// AddAvrG adds i to the "avr_g" field.
func (iduo *ImageDataUpdateOne) AddAvrG(i int) *ImageDataUpdateOne {
	iduo.mutation.AddAvrG(i)
	return iduo
}

// SetAvrB sets the "avr_b" field.
func (iduo *ImageDataUpdateOne) SetAvrB(i int) *ImageDataUpdateOne {
	iduo.mutation.ResetAvrB()
	iduo.mutation.SetAvrB(i)
	return iduo
}

// SetNillableAvrB sets the "avr_b" field if the given value is not nil.
func (iduo *ImageDataUpdateOne) SetNillableAvrB(i *int) *ImageDataUpdateOne {
	if i != nil {
		iduo.SetAvrB(*i)
	}
	return iduo
}

// AddAvrB adds i to the "avr_b" field.
func (iduo *ImageDataUpdateOne) AddAvrB(i int) *ImageDataUpdateOne {
	iduo.mutation.AddAvrB(i)
	return iduo
}

// SetAvgBrightness sets the "avg_brightness" field.
func (iduo *ImageDataUpdateOne) SetAvgBrightness(i int) *ImageDataUpdateOne {
	iduo.mutation.ResetAvgBrightness()
	iduo.mutation.SetAvgBrightness(i)
	return iduo
}

// SetNillableAvgBrightness sets the "avg_brightness" field if the given value is not nil.
func (iduo *ImageDataUpdateOne) SetNillableAvgBrightness(i *int) *ImageDataUpdateOne {
	if i != nil {
		iduo.SetAvgBrightness(*i)
	}
	return iduo
}

// AddAvgBrightness adds i to the "avg_brightness" field.
func (iduo *ImageDataUpdateOne) AddAvgBrightness(i int) *ImageDataUpdateOne {
	iduo.mutation.AddAvgBrightness(i)
	return iduo
}

// SetAvgSaturation sets the "avg_saturation" field.
func (iduo *ImageDataUpdateOne) SetAvgSaturation(i int) *ImageDataUpdateOne {
	iduo.mutation.ResetAvgSaturation()
	iduo.mutation.SetAvgSaturation(i)
	return iduo
}

// SetNillableAvgSaturation sets the "avg_saturation" field if the given value is not nil.
func (iduo *ImageDataUpdateOne) SetNillableAvgSaturation(i *int) *ImageDataUpdateOne {
	if i != nil {
		iduo.SetAvgSaturation(*i)
	}
	return iduo
}

// AddAvgSaturation adds i to the "avg_saturation" field.
func (iduo *ImageDataUpdateOne) AddAvgSaturation(i int) *ImageDataUpdateOne {
	iduo.mutation.AddAvgSaturation(i)
	return iduo
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (iduo *ImageDataUpdateOne) AddImageIDs(ids ...pid.ID) *ImageDataUpdateOne {
	iduo.mutation.AddImageIDs(ids...)
	return iduo
}

// AddImage adds the "image" edges to the Image entity.
func (iduo *ImageDataUpdateOne) AddImage(i ...*Image) *ImageDataUpdateOne {
	ids := make([]pid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iduo.AddImageIDs(ids...)
}

// Mutation returns the ImageDataMutation object of the builder.
func (iduo *ImageDataUpdateOne) Mutation() *ImageDataMutation {
	return iduo.mutation
}

// ClearImage clears all "image" edges to the Image entity.
func (iduo *ImageDataUpdateOne) ClearImage() *ImageDataUpdateOne {
	iduo.mutation.ClearImage()
	return iduo
}

// RemoveImageIDs removes the "image" edge to Image entities by IDs.
func (iduo *ImageDataUpdateOne) RemoveImageIDs(ids ...pid.ID) *ImageDataUpdateOne {
	iduo.mutation.RemoveImageIDs(ids...)
	return iduo
}

// RemoveImage removes "image" edges to Image entities.
func (iduo *ImageDataUpdateOne) RemoveImage(i ...*Image) *ImageDataUpdateOne {
	ids := make([]pid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iduo.RemoveImageIDs(ids...)
}

// Where appends a list predicates to the ImageDataUpdate builder.
func (iduo *ImageDataUpdateOne) Where(ps ...predicate.ImageData) *ImageDataUpdateOne {
	iduo.mutation.Where(ps...)
	return iduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iduo *ImageDataUpdateOne) Select(field string, fields ...string) *ImageDataUpdateOne {
	iduo.fields = append([]string{field}, fields...)
	return iduo
}

// Save executes the query and returns the updated ImageData entity.
func (iduo *ImageDataUpdateOne) Save(ctx context.Context) (*ImageData, error) {
	return withHooks(ctx, iduo.sqlSave, iduo.mutation, iduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iduo *ImageDataUpdateOne) SaveX(ctx context.Context) *ImageData {
	node, err := iduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iduo *ImageDataUpdateOne) Exec(ctx context.Context) error {
	_, err := iduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iduo *ImageDataUpdateOne) ExecX(ctx context.Context) {
	if err := iduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iduo *ImageDataUpdateOne) sqlSave(ctx context.Context) (_node *ImageData, err error) {
	_spec := sqlgraph.NewUpdateSpec(imagedata.Table, imagedata.Columns, sqlgraph.NewFieldSpec(imagedata.FieldID, field.TypeInt))
	id, ok := iduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagedata.FieldID)
		for _, f := range fields {
			if !imagedata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imagedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iduo.mutation.AvrR(); ok {
		_spec.SetField(imagedata.FieldAvrR, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AddedAvrR(); ok {
		_spec.AddField(imagedata.FieldAvrR, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AvrG(); ok {
		_spec.SetField(imagedata.FieldAvrG, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AddedAvrG(); ok {
		_spec.AddField(imagedata.FieldAvrG, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AvrB(); ok {
		_spec.SetField(imagedata.FieldAvrB, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AddedAvrB(); ok {
		_spec.AddField(imagedata.FieldAvrB, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AvgBrightness(); ok {
		_spec.SetField(imagedata.FieldAvgBrightness, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AddedAvgBrightness(); ok {
		_spec.AddField(imagedata.FieldAvgBrightness, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AvgSaturation(); ok {
		_spec.SetField(imagedata.FieldAvgSaturation, field.TypeInt, value)
	}
	if value, ok := iduo.mutation.AddedAvgSaturation(); ok {
		_spec.AddField(imagedata.FieldAvgSaturation, field.TypeInt, value)
	}
	if iduo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagedata.ImageTable,
			Columns: []string{imagedata.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iduo.mutation.RemovedImageIDs(); len(nodes) > 0 && !iduo.mutation.ImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagedata.ImageTable,
			Columns: []string{imagedata.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iduo.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagedata.ImageTable,
			Columns: []string{imagedata.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImageData{config: iduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iduo.mutation.done = true
	return _node, nil
}
