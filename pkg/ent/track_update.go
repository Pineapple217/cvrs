// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/artist"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
	"github.com/Pineapple217/cvrs/pkg/ent/release"
	"github.com/Pineapple217/cvrs/pkg/ent/track"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// TrackUpdate is the builder for updating Track entities.
type TrackUpdate struct {
	config
	hooks    []Hook
	mutation *TrackMutation
}

// Where appends a list predicates to the TrackUpdate builder.
func (tu *TrackUpdate) Where(ps ...predicate.Track) *TrackUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TrackUpdate) SetTitle(s string) *TrackUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TrackUpdate) SetNillableTitle(s *string) *TrackUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetPosition sets the "position" field.
func (tu *TrackUpdate) SetPosition(i int) *TrackUpdate {
	tu.mutation.ResetPosition()
	tu.mutation.SetPosition(i)
	return tu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (tu *TrackUpdate) SetNillablePosition(i *int) *TrackUpdate {
	if i != nil {
		tu.SetPosition(*i)
	}
	return tu
}

// AddPosition adds i to the "position" field.
func (tu *TrackUpdate) AddPosition(i int) *TrackUpdate {
	tu.mutation.AddPosition(i)
	return tu
}

// AddAppearingArtistIDs adds the "appearing_artists" edge to the Artist entity by IDs.
func (tu *TrackUpdate) AddAppearingArtistIDs(ids ...pid.ID) *TrackUpdate {
	tu.mutation.AddAppearingArtistIDs(ids...)
	return tu
}

// AddAppearingArtists adds the "appearing_artists" edges to the Artist entity.
func (tu *TrackUpdate) AddAppearingArtists(a ...*Artist) *TrackUpdate {
	ids := make([]pid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddAppearingArtistIDs(ids...)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (tu *TrackUpdate) SetReleaseID(id pid.ID) *TrackUpdate {
	tu.mutation.SetReleaseID(id)
	return tu
}

// SetRelease sets the "release" edge to the Release entity.
func (tu *TrackUpdate) SetRelease(r *Release) *TrackUpdate {
	return tu.SetReleaseID(r.ID)
}

// Mutation returns the TrackMutation object of the builder.
func (tu *TrackUpdate) Mutation() *TrackMutation {
	return tu.mutation
}

// ClearAppearingArtists clears all "appearing_artists" edges to the Artist entity.
func (tu *TrackUpdate) ClearAppearingArtists() *TrackUpdate {
	tu.mutation.ClearAppearingArtists()
	return tu
}

// RemoveAppearingArtistIDs removes the "appearing_artists" edge to Artist entities by IDs.
func (tu *TrackUpdate) RemoveAppearingArtistIDs(ids ...pid.ID) *TrackUpdate {
	tu.mutation.RemoveAppearingArtistIDs(ids...)
	return tu
}

// RemoveAppearingArtists removes "appearing_artists" edges to Artist entities.
func (tu *TrackUpdate) RemoveAppearingArtists(a ...*Artist) *TrackUpdate {
	ids := make([]pid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveAppearingArtistIDs(ids...)
}

// ClearRelease clears the "release" edge to the Release entity.
func (tu *TrackUpdate) ClearRelease() *TrackUpdate {
	tu.mutation.ClearRelease()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrackUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrackUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrackUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TrackUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := track.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Track.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Position(); ok {
		if err := track.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Track.position": %w`, err)}
		}
	}
	if tu.mutation.ReleaseCleared() && len(tu.mutation.ReleaseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Track.release"`)
	}
	return nil
}

func (tu *TrackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(track.Table, track.Columns, sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(track.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Position(); ok {
		_spec.SetField(track.FieldPosition, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedPosition(); ok {
		_spec.AddField(track.FieldPosition, field.TypeInt, value)
	}
	if tu.mutation.AppearingArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.AppearingArtistsTable,
			Columns: track.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		createE := &TrackAppearanceCreate{config: tu.config, mutation: newTrackAppearanceMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedAppearingArtistsIDs(); len(nodes) > 0 && !tu.mutation.AppearingArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.AppearingArtistsTable,
			Columns: track.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TrackAppearanceCreate{config: tu.config, mutation: newTrackAppearanceMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AppearingArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.AppearingArtistsTable,
			Columns: track.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TrackAppearanceCreate{config: tu.config, mutation: newTrackAppearanceMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.ReleaseTable,
			Columns: []string{track.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.ReleaseTable,
			Columns: []string{track.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{track.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrackUpdateOne is the builder for updating a single Track entity.
type TrackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrackMutation
}

// SetTitle sets the "title" field.
func (tuo *TrackUpdateOne) SetTitle(s string) *TrackUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillableTitle(s *string) *TrackUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetPosition sets the "position" field.
func (tuo *TrackUpdateOne) SetPosition(i int) *TrackUpdateOne {
	tuo.mutation.ResetPosition()
	tuo.mutation.SetPosition(i)
	return tuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (tuo *TrackUpdateOne) SetNillablePosition(i *int) *TrackUpdateOne {
	if i != nil {
		tuo.SetPosition(*i)
	}
	return tuo
}

// AddPosition adds i to the "position" field.
func (tuo *TrackUpdateOne) AddPosition(i int) *TrackUpdateOne {
	tuo.mutation.AddPosition(i)
	return tuo
}

// AddAppearingArtistIDs adds the "appearing_artists" edge to the Artist entity by IDs.
func (tuo *TrackUpdateOne) AddAppearingArtistIDs(ids ...pid.ID) *TrackUpdateOne {
	tuo.mutation.AddAppearingArtistIDs(ids...)
	return tuo
}

// AddAppearingArtists adds the "appearing_artists" edges to the Artist entity.
func (tuo *TrackUpdateOne) AddAppearingArtists(a ...*Artist) *TrackUpdateOne {
	ids := make([]pid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddAppearingArtistIDs(ids...)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (tuo *TrackUpdateOne) SetReleaseID(id pid.ID) *TrackUpdateOne {
	tuo.mutation.SetReleaseID(id)
	return tuo
}

// SetRelease sets the "release" edge to the Release entity.
func (tuo *TrackUpdateOne) SetRelease(r *Release) *TrackUpdateOne {
	return tuo.SetReleaseID(r.ID)
}

// Mutation returns the TrackMutation object of the builder.
func (tuo *TrackUpdateOne) Mutation() *TrackMutation {
	return tuo.mutation
}

// ClearAppearingArtists clears all "appearing_artists" edges to the Artist entity.
func (tuo *TrackUpdateOne) ClearAppearingArtists() *TrackUpdateOne {
	tuo.mutation.ClearAppearingArtists()
	return tuo
}

// RemoveAppearingArtistIDs removes the "appearing_artists" edge to Artist entities by IDs.
func (tuo *TrackUpdateOne) RemoveAppearingArtistIDs(ids ...pid.ID) *TrackUpdateOne {
	tuo.mutation.RemoveAppearingArtistIDs(ids...)
	return tuo
}

// RemoveAppearingArtists removes "appearing_artists" edges to Artist entities.
func (tuo *TrackUpdateOne) RemoveAppearingArtists(a ...*Artist) *TrackUpdateOne {
	ids := make([]pid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveAppearingArtistIDs(ids...)
}

// ClearRelease clears the "release" edge to the Release entity.
func (tuo *TrackUpdateOne) ClearRelease() *TrackUpdateOne {
	tuo.mutation.ClearRelease()
	return tuo
}

// Where appends a list predicates to the TrackUpdate builder.
func (tuo *TrackUpdateOne) Where(ps ...predicate.Track) *TrackUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrackUpdateOne) Select(field string, fields ...string) *TrackUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Track entity.
func (tuo *TrackUpdateOne) Save(ctx context.Context) (*Track, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrackUpdateOne) SaveX(ctx context.Context) *Track {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrackUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrackUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TrackUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := track.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Track.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Position(); ok {
		if err := track.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Track.position": %w`, err)}
		}
	}
	if tuo.mutation.ReleaseCleared() && len(tuo.mutation.ReleaseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Track.release"`)
	}
	return nil
}

func (tuo *TrackUpdateOne) sqlSave(ctx context.Context) (_node *Track, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(track.Table, track.Columns, sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Track.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, track.FieldID)
		for _, f := range fields {
			if !track.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != track.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(track.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Position(); ok {
		_spec.SetField(track.FieldPosition, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedPosition(); ok {
		_spec.AddField(track.FieldPosition, field.TypeInt, value)
	}
	if tuo.mutation.AppearingArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.AppearingArtistsTable,
			Columns: track.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		createE := &TrackAppearanceCreate{config: tuo.config, mutation: newTrackAppearanceMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedAppearingArtistsIDs(); len(nodes) > 0 && !tuo.mutation.AppearingArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.AppearingArtistsTable,
			Columns: track.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TrackAppearanceCreate{config: tuo.config, mutation: newTrackAppearanceMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AppearingArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   track.AppearingArtistsTable,
			Columns: track.AppearingArtistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &TrackAppearanceCreate{config: tuo.config, mutation: newTrackAppearanceMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.ReleaseTable,
			Columns: []string{track.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   track.ReleaseTable,
			Columns: []string{track.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Track{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{track.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
