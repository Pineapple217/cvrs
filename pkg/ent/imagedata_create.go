// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/imagedata"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// ImageDataCreate is the builder for creating a ImageData entity.
type ImageDataCreate struct {
	config
	mutation *ImageDataMutation
	hooks    []Hook
}

// SetAvrR sets the "avr_r" field.
func (idc *ImageDataCreate) SetAvrR(i int) *ImageDataCreate {
	idc.mutation.SetAvrR(i)
	return idc
}

// SetAvrG sets the "avr_g" field.
func (idc *ImageDataCreate) SetAvrG(i int) *ImageDataCreate {
	idc.mutation.SetAvrG(i)
	return idc
}

// SetAvrB sets the "avr_b" field.
func (idc *ImageDataCreate) SetAvrB(i int) *ImageDataCreate {
	idc.mutation.SetAvrB(i)
	return idc
}

// SetAvgBrightness sets the "avg_brightness" field.
func (idc *ImageDataCreate) SetAvgBrightness(i int) *ImageDataCreate {
	idc.mutation.SetAvgBrightness(i)
	return idc
}

// SetAvgSaturation sets the "avg_saturation" field.
func (idc *ImageDataCreate) SetAvgSaturation(i int) *ImageDataCreate {
	idc.mutation.SetAvgSaturation(i)
	return idc
}

// SetCreatedAt sets the "created_at" field.
func (idc *ImageDataCreate) SetCreatedAt(t time.Time) *ImageDataCreate {
	idc.mutation.SetCreatedAt(t)
	return idc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (idc *ImageDataCreate) SetNillableCreatedAt(t *time.Time) *ImageDataCreate {
	if t != nil {
		idc.SetCreatedAt(*t)
	}
	return idc
}

// AddImageIDs adds the "image" edge to the Image entity by IDs.
func (idc *ImageDataCreate) AddImageIDs(ids ...pid.ID) *ImageDataCreate {
	idc.mutation.AddImageIDs(ids...)
	return idc
}

// AddImage adds the "image" edges to the Image entity.
func (idc *ImageDataCreate) AddImage(i ...*Image) *ImageDataCreate {
	ids := make([]pid.ID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return idc.AddImageIDs(ids...)
}

// Mutation returns the ImageDataMutation object of the builder.
func (idc *ImageDataCreate) Mutation() *ImageDataMutation {
	return idc.mutation
}

// Save creates the ImageData in the database.
func (idc *ImageDataCreate) Save(ctx context.Context) (*ImageData, error) {
	idc.defaults()
	return withHooks(ctx, idc.sqlSave, idc.mutation, idc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (idc *ImageDataCreate) SaveX(ctx context.Context) *ImageData {
	v, err := idc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idc *ImageDataCreate) Exec(ctx context.Context) error {
	_, err := idc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idc *ImageDataCreate) ExecX(ctx context.Context) {
	if err := idc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (idc *ImageDataCreate) defaults() {
	if _, ok := idc.mutation.CreatedAt(); !ok {
		v := imagedata.DefaultCreatedAt()
		idc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (idc *ImageDataCreate) check() error {
	if _, ok := idc.mutation.AvrR(); !ok {
		return &ValidationError{Name: "avr_r", err: errors.New(`ent: missing required field "ImageData.avr_r"`)}
	}
	if _, ok := idc.mutation.AvrG(); !ok {
		return &ValidationError{Name: "avr_g", err: errors.New(`ent: missing required field "ImageData.avr_g"`)}
	}
	if _, ok := idc.mutation.AvrB(); !ok {
		return &ValidationError{Name: "avr_b", err: errors.New(`ent: missing required field "ImageData.avr_b"`)}
	}
	if _, ok := idc.mutation.AvgBrightness(); !ok {
		return &ValidationError{Name: "avg_brightness", err: errors.New(`ent: missing required field "ImageData.avg_brightness"`)}
	}
	if _, ok := idc.mutation.AvgSaturation(); !ok {
		return &ValidationError{Name: "avg_saturation", err: errors.New(`ent: missing required field "ImageData.avg_saturation"`)}
	}
	if _, ok := idc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ImageData.created_at"`)}
	}
	if len(idc.mutation.ImageIDs()) == 0 {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required edge "ImageData.image"`)}
	}
	return nil
}

func (idc *ImageDataCreate) sqlSave(ctx context.Context) (*ImageData, error) {
	if err := idc.check(); err != nil {
		return nil, err
	}
	_node, _spec := idc.createSpec()
	if err := sqlgraph.CreateNode(ctx, idc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	idc.mutation.id = &_node.ID
	idc.mutation.done = true
	return _node, nil
}

func (idc *ImageDataCreate) createSpec() (*ImageData, *sqlgraph.CreateSpec) {
	var (
		_node = &ImageData{config: idc.config}
		_spec = sqlgraph.NewCreateSpec(imagedata.Table, sqlgraph.NewFieldSpec(imagedata.FieldID, field.TypeInt))
	)
	if value, ok := idc.mutation.AvrR(); ok {
		_spec.SetField(imagedata.FieldAvrR, field.TypeInt, value)
		_node.AvrR = value
	}
	if value, ok := idc.mutation.AvrG(); ok {
		_spec.SetField(imagedata.FieldAvrG, field.TypeInt, value)
		_node.AvrG = value
	}
	if value, ok := idc.mutation.AvrB(); ok {
		_spec.SetField(imagedata.FieldAvrB, field.TypeInt, value)
		_node.AvrB = value
	}
	if value, ok := idc.mutation.AvgBrightness(); ok {
		_spec.SetField(imagedata.FieldAvgBrightness, field.TypeInt, value)
		_node.AvgBrightness = value
	}
	if value, ok := idc.mutation.AvgSaturation(); ok {
		_spec.SetField(imagedata.FieldAvgSaturation, field.TypeInt, value)
		_node.AvgSaturation = value
	}
	if value, ok := idc.mutation.CreatedAt(); ok {
		_spec.SetField(imagedata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := idc.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagedata.ImageTable,
			Columns: []string{imagedata.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageDataCreateBulk is the builder for creating many ImageData entities in bulk.
type ImageDataCreateBulk struct {
	config
	err      error
	builders []*ImageDataCreate
}

// Save creates the ImageData entities in the database.
func (idcb *ImageDataCreateBulk) Save(ctx context.Context) ([]*ImageData, error) {
	if idcb.err != nil {
		return nil, idcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(idcb.builders))
	nodes := make([]*ImageData, len(idcb.builders))
	mutators := make([]Mutator, len(idcb.builders))
	for i := range idcb.builders {
		func(i int, root context.Context) {
			builder := idcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, idcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, idcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, idcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (idcb *ImageDataCreateBulk) SaveX(ctx context.Context) []*ImageData {
	v, err := idcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (idcb *ImageDataCreateBulk) Exec(ctx context.Context) error {
	_, err := idcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (idcb *ImageDataCreateBulk) ExecX(ctx context.Context) {
	if err := idcb.Exec(ctx); err != nil {
		panic(err)
	}
}
