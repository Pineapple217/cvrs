// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/Pineapple217/cvrs/pkg/ent/migrate"
	"github.com/Pineapple217/cvrs/pkg/pid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/ent/artist"
	"github.com/Pineapple217/cvrs/pkg/ent/image"
	"github.com/Pineapple217/cvrs/pkg/ent/imagedata"
	"github.com/Pineapple217/cvrs/pkg/ent/processedimage"
	"github.com/Pineapple217/cvrs/pkg/ent/release"
	"github.com/Pineapple217/cvrs/pkg/ent/releaseappearance"
	"github.com/Pineapple217/cvrs/pkg/ent/task"
	"github.com/Pineapple217/cvrs/pkg/ent/track"
	"github.com/Pineapple217/cvrs/pkg/ent/trackappearance"
	"github.com/Pineapple217/cvrs/pkg/ent/user"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Artist is the client for interacting with the Artist builders.
	Artist *ArtistClient
	// Image is the client for interacting with the Image builders.
	Image *ImageClient
	// ImageData is the client for interacting with the ImageData builders.
	ImageData *ImageDataClient
	// ProcessedImage is the client for interacting with the ProcessedImage builders.
	ProcessedImage *ProcessedImageClient
	// Release is the client for interacting with the Release builders.
	Release *ReleaseClient
	// ReleaseAppearance is the client for interacting with the ReleaseAppearance builders.
	ReleaseAppearance *ReleaseAppearanceClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// Track is the client for interacting with the Track builders.
	Track *TrackClient
	// TrackAppearance is the client for interacting with the TrackAppearance builders.
	TrackAppearance *TrackAppearanceClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Artist = NewArtistClient(c.config)
	c.Image = NewImageClient(c.config)
	c.ImageData = NewImageDataClient(c.config)
	c.ProcessedImage = NewProcessedImageClient(c.config)
	c.Release = NewReleaseClient(c.config)
	c.ReleaseAppearance = NewReleaseAppearanceClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.Track = NewTrackClient(c.config)
	c.TrackAppearance = NewTrackAppearanceClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Artist:            NewArtistClient(cfg),
		Image:             NewImageClient(cfg),
		ImageData:         NewImageDataClient(cfg),
		ProcessedImage:    NewProcessedImageClient(cfg),
		Release:           NewReleaseClient(cfg),
		ReleaseAppearance: NewReleaseAppearanceClient(cfg),
		Task:              NewTaskClient(cfg),
		Track:             NewTrackClient(cfg),
		TrackAppearance:   NewTrackAppearanceClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		Artist:            NewArtistClient(cfg),
		Image:             NewImageClient(cfg),
		ImageData:         NewImageDataClient(cfg),
		ProcessedImage:    NewProcessedImageClient(cfg),
		Release:           NewReleaseClient(cfg),
		ReleaseAppearance: NewReleaseAppearanceClient(cfg),
		Task:              NewTaskClient(cfg),
		Track:             NewTrackClient(cfg),
		TrackAppearance:   NewTrackAppearanceClient(cfg),
		User:              NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Artist.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Artist, c.Image, c.ImageData, c.ProcessedImage, c.Release,
		c.ReleaseAppearance, c.Task, c.Track, c.TrackAppearance, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Artist, c.Image, c.ImageData, c.ProcessedImage, c.Release,
		c.ReleaseAppearance, c.Task, c.Track, c.TrackAppearance, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ArtistMutation:
		return c.Artist.mutate(ctx, m)
	case *ImageMutation:
		return c.Image.mutate(ctx, m)
	case *ImageDataMutation:
		return c.ImageData.mutate(ctx, m)
	case *ProcessedImageMutation:
		return c.ProcessedImage.mutate(ctx, m)
	case *ReleaseMutation:
		return c.Release.mutate(ctx, m)
	case *ReleaseAppearanceMutation:
		return c.ReleaseAppearance.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *TrackMutation:
		return c.Track.mutate(ctx, m)
	case *TrackAppearanceMutation:
		return c.TrackAppearance.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ArtistClient is a client for the Artist schema.
type ArtistClient struct {
	config
}

// NewArtistClient returns a client for the Artist from the given config.
func NewArtistClient(c config) *ArtistClient {
	return &ArtistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `artist.Hooks(f(g(h())))`.
func (c *ArtistClient) Use(hooks ...Hook) {
	c.hooks.Artist = append(c.hooks.Artist, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `artist.Intercept(f(g(h())))`.
func (c *ArtistClient) Intercept(interceptors ...Interceptor) {
	c.inters.Artist = append(c.inters.Artist, interceptors...)
}

// Create returns a builder for creating a Artist entity.
func (c *ArtistClient) Create() *ArtistCreate {
	mutation := newArtistMutation(c.config, OpCreate)
	return &ArtistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Artist entities.
func (c *ArtistClient) CreateBulk(builders ...*ArtistCreate) *ArtistCreateBulk {
	return &ArtistCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArtistClient) MapCreateBulk(slice any, setFunc func(*ArtistCreate, int)) *ArtistCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArtistCreateBulk{err: fmt.Errorf("calling to ArtistClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArtistCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArtistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Artist.
func (c *ArtistClient) Update() *ArtistUpdate {
	mutation := newArtistMutation(c.config, OpUpdate)
	return &ArtistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArtistClient) UpdateOne(a *Artist) *ArtistUpdateOne {
	mutation := newArtistMutation(c.config, OpUpdateOne, withArtist(a))
	return &ArtistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArtistClient) UpdateOneID(id pid.ID) *ArtistUpdateOne {
	mutation := newArtistMutation(c.config, OpUpdateOne, withArtistID(id))
	return &ArtistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Artist.
func (c *ArtistClient) Delete() *ArtistDelete {
	mutation := newArtistMutation(c.config, OpDelete)
	return &ArtistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArtistClient) DeleteOne(a *Artist) *ArtistDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArtistClient) DeleteOneID(id pid.ID) *ArtistDeleteOne {
	builder := c.Delete().Where(artist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArtistDeleteOne{builder}
}

// Query returns a query builder for Artist.
func (c *ArtistClient) Query() *ArtistQuery {
	return &ArtistQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArtist},
		inters: c.Interceptors(),
	}
}

// Get returns a Artist entity by its id.
func (c *ArtistClient) Get(ctx context.Context, id pid.ID) (*Artist, error) {
	return c.Query().Where(artist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArtistClient) GetX(ctx context.Context, id pid.ID) *Artist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppearingTracks queries the appearing_tracks edge of a Artist.
func (c *ArtistClient) QueryAppearingTracks(a *Artist) *TrackQuery {
	query := (&TrackClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, id),
			sqlgraph.To(track.Table, track.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, artist.AppearingTracksTable, artist.AppearingTracksPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppearingReleases queries the appearing_releases edge of a Artist.
func (c *ArtistClient) QueryAppearingReleases(a *Artist) *ReleaseQuery {
	query := (&ReleaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, id),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, artist.AppearingReleasesTable, artist.AppearingReleasesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImage queries the image edge of a Artist.
func (c *ArtistClient) QueryImage(a *Artist) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, artist.ImageTable, artist.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTrackAppearance queries the track_appearance edge of a Artist.
func (c *ArtistClient) QueryTrackAppearance(a *Artist) *TrackAppearanceQuery {
	query := (&TrackAppearanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, id),
			sqlgraph.To(trackappearance.Table, trackappearance.ArtistColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, artist.TrackAppearanceTable, artist.TrackAppearanceColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReleaseAppearance queries the release_appearance edge of a Artist.
func (c *ArtistClient) QueryReleaseAppearance(a *Artist) *ReleaseAppearanceQuery {
	query := (&ReleaseAppearanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, id),
			sqlgraph.To(releaseappearance.Table, releaseappearance.ArtistColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, artist.ReleaseAppearanceTable, artist.ReleaseAppearanceColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArtistClient) Hooks() []Hook {
	return c.hooks.Artist
}

// Interceptors returns the client interceptors.
func (c *ArtistClient) Interceptors() []Interceptor {
	return c.inters.Artist
}

func (c *ArtistClient) mutate(ctx context.Context, m *ArtistMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArtistCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArtistUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArtistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArtistDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Artist mutation op: %q", m.Op())
	}
}

// ImageClient is a client for the Image schema.
type ImageClient struct {
	config
}

// NewImageClient returns a client for the Image from the given config.
func NewImageClient(c config) *ImageClient {
	return &ImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `image.Hooks(f(g(h())))`.
func (c *ImageClient) Use(hooks ...Hook) {
	c.hooks.Image = append(c.hooks.Image, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `image.Intercept(f(g(h())))`.
func (c *ImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Image = append(c.inters.Image, interceptors...)
}

// Create returns a builder for creating a Image entity.
func (c *ImageClient) Create() *ImageCreate {
	mutation := newImageMutation(c.config, OpCreate)
	return &ImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Image entities.
func (c *ImageClient) CreateBulk(builders ...*ImageCreate) *ImageCreateBulk {
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ImageClient) MapCreateBulk(slice any, setFunc func(*ImageCreate, int)) *ImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ImageCreateBulk{err: fmt.Errorf("calling to ImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Image.
func (c *ImageClient) Update() *ImageUpdate {
	mutation := newImageMutation(c.config, OpUpdate)
	return &ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageClient) UpdateOne(i *Image) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImage(i))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageClient) UpdateOneID(id pid.ID) *ImageUpdateOne {
	mutation := newImageMutation(c.config, OpUpdateOne, withImageID(id))
	return &ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Image.
func (c *ImageClient) Delete() *ImageDelete {
	mutation := newImageMutation(c.config, OpDelete)
	return &ImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageClient) DeleteOne(i *Image) *ImageDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageClient) DeleteOneID(id pid.ID) *ImageDeleteOne {
	builder := c.Delete().Where(image.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDeleteOne{builder}
}

// Query returns a query builder for Image.
func (c *ImageClient) Query() *ImageQuery {
	return &ImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImage},
		inters: c.Interceptors(),
	}
}

// Get returns a Image entity by its id.
func (c *ImageClient) Get(ctx context.Context, id pid.ID) (*Image, error) {
	return c.Query().Where(image.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageClient) GetX(ctx context.Context, id pid.ID) *Image {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRelease queries the release edge of a Image.
func (c *ImageClient) QueryRelease(i *Image) *ReleaseQuery {
	query := (&ReleaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, image.ReleaseTable, image.ReleaseColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArtist queries the artist edge of a Image.
func (c *ImageClient) QueryArtist(i *Image) *ArtistQuery {
	query := (&ArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(artist.Table, artist.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, image.ArtistTable, image.ArtistColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUploader queries the uploader edge of a Image.
func (c *ImageClient) QueryUploader(i *Image) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, image.UploaderTable, image.UploaderColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProccesedImage queries the proccesed_image edge of a Image.
func (c *ImageClient) QueryProccesedImage(i *Image) *ProcessedImageQuery {
	query := (&ProcessedImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(processedimage.Table, processedimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, image.ProccesedImageTable, image.ProccesedImageColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryData queries the data edge of a Image.
func (c *ImageClient) QueryData(i *Image) *ImageDataQuery {
	query := (&ImageDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(image.Table, image.FieldID, id),
			sqlgraph.To(imagedata.Table, imagedata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, image.DataTable, image.DataColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageClient) Hooks() []Hook {
	hooks := c.hooks.Image
	return append(hooks[:len(hooks):len(hooks)], image.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ImageClient) Interceptors() []Interceptor {
	return c.inters.Image
}

func (c *ImageClient) mutate(ctx context.Context, m *ImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Image mutation op: %q", m.Op())
	}
}

// ImageDataClient is a client for the ImageData schema.
type ImageDataClient struct {
	config
}

// NewImageDataClient returns a client for the ImageData from the given config.
func NewImageDataClient(c config) *ImageDataClient {
	return &ImageDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `imagedata.Hooks(f(g(h())))`.
func (c *ImageDataClient) Use(hooks ...Hook) {
	c.hooks.ImageData = append(c.hooks.ImageData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `imagedata.Intercept(f(g(h())))`.
func (c *ImageDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.ImageData = append(c.inters.ImageData, interceptors...)
}

// Create returns a builder for creating a ImageData entity.
func (c *ImageDataClient) Create() *ImageDataCreate {
	mutation := newImageDataMutation(c.config, OpCreate)
	return &ImageDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ImageData entities.
func (c *ImageDataClient) CreateBulk(builders ...*ImageDataCreate) *ImageDataCreateBulk {
	return &ImageDataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ImageDataClient) MapCreateBulk(slice any, setFunc func(*ImageDataCreate, int)) *ImageDataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ImageDataCreateBulk{err: fmt.Errorf("calling to ImageDataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ImageDataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ImageDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ImageData.
func (c *ImageDataClient) Update() *ImageDataUpdate {
	mutation := newImageDataMutation(c.config, OpUpdate)
	return &ImageDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ImageDataClient) UpdateOne(id *ImageData) *ImageDataUpdateOne {
	mutation := newImageDataMutation(c.config, OpUpdateOne, withImageData(id))
	return &ImageDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ImageDataClient) UpdateOneID(id int) *ImageDataUpdateOne {
	mutation := newImageDataMutation(c.config, OpUpdateOne, withImageDataID(id))
	return &ImageDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ImageData.
func (c *ImageDataClient) Delete() *ImageDataDelete {
	mutation := newImageDataMutation(c.config, OpDelete)
	return &ImageDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ImageDataClient) DeleteOne(id *ImageData) *ImageDataDeleteOne {
	return c.DeleteOneID(id.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ImageDataClient) DeleteOneID(id int) *ImageDataDeleteOne {
	builder := c.Delete().Where(imagedata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ImageDataDeleteOne{builder}
}

// Query returns a query builder for ImageData.
func (c *ImageDataClient) Query() *ImageDataQuery {
	return &ImageDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeImageData},
		inters: c.Interceptors(),
	}
}

// Get returns a ImageData entity by its id.
func (c *ImageDataClient) Get(ctx context.Context, id int) (*ImageData, error) {
	return c.Query().Where(imagedata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ImageDataClient) GetX(ctx context.Context, id int) *ImageData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImage queries the image edge of a ImageData.
func (c *ImageDataClient) QueryImage(node *ImageData) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := node.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(imagedata.Table, imagedata.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, imagedata.ImageTable, imagedata.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(node.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ImageDataClient) Hooks() []Hook {
	return c.hooks.ImageData
}

// Interceptors returns the client interceptors.
func (c *ImageDataClient) Interceptors() []Interceptor {
	return c.inters.ImageData
}

func (c *ImageDataClient) mutate(ctx context.Context, m *ImageDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ImageDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ImageDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ImageDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ImageDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ImageData mutation op: %q", m.Op())
	}
}

// ProcessedImageClient is a client for the ProcessedImage schema.
type ProcessedImageClient struct {
	config
}

// NewProcessedImageClient returns a client for the ProcessedImage from the given config.
func NewProcessedImageClient(c config) *ProcessedImageClient {
	return &ProcessedImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `processedimage.Hooks(f(g(h())))`.
func (c *ProcessedImageClient) Use(hooks ...Hook) {
	c.hooks.ProcessedImage = append(c.hooks.ProcessedImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `processedimage.Intercept(f(g(h())))`.
func (c *ProcessedImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProcessedImage = append(c.inters.ProcessedImage, interceptors...)
}

// Create returns a builder for creating a ProcessedImage entity.
func (c *ProcessedImageClient) Create() *ProcessedImageCreate {
	mutation := newProcessedImageMutation(c.config, OpCreate)
	return &ProcessedImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProcessedImage entities.
func (c *ProcessedImageClient) CreateBulk(builders ...*ProcessedImageCreate) *ProcessedImageCreateBulk {
	return &ProcessedImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProcessedImageClient) MapCreateBulk(slice any, setFunc func(*ProcessedImageCreate, int)) *ProcessedImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProcessedImageCreateBulk{err: fmt.Errorf("calling to ProcessedImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProcessedImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProcessedImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProcessedImage.
func (c *ProcessedImageClient) Update() *ProcessedImageUpdate {
	mutation := newProcessedImageMutation(c.config, OpUpdate)
	return &ProcessedImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcessedImageClient) UpdateOne(pi *ProcessedImage) *ProcessedImageUpdateOne {
	mutation := newProcessedImageMutation(c.config, OpUpdateOne, withProcessedImage(pi))
	return &ProcessedImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcessedImageClient) UpdateOneID(id pid.ID) *ProcessedImageUpdateOne {
	mutation := newProcessedImageMutation(c.config, OpUpdateOne, withProcessedImageID(id))
	return &ProcessedImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProcessedImage.
func (c *ProcessedImageClient) Delete() *ProcessedImageDelete {
	mutation := newProcessedImageMutation(c.config, OpDelete)
	return &ProcessedImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcessedImageClient) DeleteOne(pi *ProcessedImage) *ProcessedImageDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProcessedImageClient) DeleteOneID(id pid.ID) *ProcessedImageDeleteOne {
	builder := c.Delete().Where(processedimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcessedImageDeleteOne{builder}
}

// Query returns a query builder for ProcessedImage.
func (c *ProcessedImageClient) Query() *ProcessedImageQuery {
	return &ProcessedImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProcessedImage},
		inters: c.Interceptors(),
	}
}

// Get returns a ProcessedImage entity by its id.
func (c *ProcessedImageClient) Get(ctx context.Context, id pid.ID) (*ProcessedImage, error) {
	return c.Query().Where(processedimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcessedImageClient) GetX(ctx context.Context, id pid.ID) *ProcessedImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySource queries the source edge of a ProcessedImage.
func (c *ProcessedImageClient) QuerySource(pi *ProcessedImage) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(processedimage.Table, processedimage.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, processedimage.SourceTable, processedimage.SourceColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProcessedImageClient) Hooks() []Hook {
	return c.hooks.ProcessedImage
}

// Interceptors returns the client interceptors.
func (c *ProcessedImageClient) Interceptors() []Interceptor {
	return c.inters.ProcessedImage
}

func (c *ProcessedImageClient) mutate(ctx context.Context, m *ProcessedImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProcessedImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProcessedImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProcessedImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProcessedImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProcessedImage mutation op: %q", m.Op())
	}
}

// ReleaseClient is a client for the Release schema.
type ReleaseClient struct {
	config
}

// NewReleaseClient returns a client for the Release from the given config.
func NewReleaseClient(c config) *ReleaseClient {
	return &ReleaseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `release.Hooks(f(g(h())))`.
func (c *ReleaseClient) Use(hooks ...Hook) {
	c.hooks.Release = append(c.hooks.Release, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `release.Intercept(f(g(h())))`.
func (c *ReleaseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Release = append(c.inters.Release, interceptors...)
}

// Create returns a builder for creating a Release entity.
func (c *ReleaseClient) Create() *ReleaseCreate {
	mutation := newReleaseMutation(c.config, OpCreate)
	return &ReleaseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Release entities.
func (c *ReleaseClient) CreateBulk(builders ...*ReleaseCreate) *ReleaseCreateBulk {
	return &ReleaseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReleaseClient) MapCreateBulk(slice any, setFunc func(*ReleaseCreate, int)) *ReleaseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReleaseCreateBulk{err: fmt.Errorf("calling to ReleaseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReleaseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReleaseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Release.
func (c *ReleaseClient) Update() *ReleaseUpdate {
	mutation := newReleaseMutation(c.config, OpUpdate)
	return &ReleaseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReleaseClient) UpdateOne(r *Release) *ReleaseUpdateOne {
	mutation := newReleaseMutation(c.config, OpUpdateOne, withRelease(r))
	return &ReleaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReleaseClient) UpdateOneID(id pid.ID) *ReleaseUpdateOne {
	mutation := newReleaseMutation(c.config, OpUpdateOne, withReleaseID(id))
	return &ReleaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Release.
func (c *ReleaseClient) Delete() *ReleaseDelete {
	mutation := newReleaseMutation(c.config, OpDelete)
	return &ReleaseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReleaseClient) DeleteOne(r *Release) *ReleaseDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReleaseClient) DeleteOneID(id pid.ID) *ReleaseDeleteOne {
	builder := c.Delete().Where(release.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReleaseDeleteOne{builder}
}

// Query returns a query builder for Release.
func (c *ReleaseClient) Query() *ReleaseQuery {
	return &ReleaseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRelease},
		inters: c.Interceptors(),
	}
}

// Get returns a Release entity by its id.
func (c *ReleaseClient) Get(ctx context.Context, id pid.ID) (*Release, error) {
	return c.Query().Where(release.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReleaseClient) GetX(ctx context.Context, id pid.ID) *Release {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImage queries the image edge of a Release.
func (c *ReleaseClient) QueryImage(r *Release) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, release.ImageTable, release.ImageColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTracks queries the tracks edge of a Release.
func (c *ReleaseClient) QueryTracks(r *Release) *TrackQuery {
	query := (&TrackClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, id),
			sqlgraph.To(track.Table, track.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, release.TracksTable, release.TracksColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppearingArtists queries the appearing_artists edge of a Release.
func (c *ReleaseClient) QueryAppearingArtists(r *Release) *ArtistQuery {
	query := (&ArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, id),
			sqlgraph.To(artist.Table, artist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, release.AppearingArtistsTable, release.AppearingArtistsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReleaseAppearance queries the release_appearance edge of a Release.
func (c *ReleaseClient) QueryReleaseAppearance(r *Release) *ReleaseAppearanceQuery {
	query := (&ReleaseAppearanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(release.Table, release.FieldID, id),
			sqlgraph.To(releaseappearance.Table, releaseappearance.ReleaseColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, release.ReleaseAppearanceTable, release.ReleaseAppearanceColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReleaseClient) Hooks() []Hook {
	return c.hooks.Release
}

// Interceptors returns the client interceptors.
func (c *ReleaseClient) Interceptors() []Interceptor {
	return c.inters.Release
}

func (c *ReleaseClient) mutate(ctx context.Context, m *ReleaseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReleaseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReleaseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReleaseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReleaseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Release mutation op: %q", m.Op())
	}
}

// ReleaseAppearanceClient is a client for the ReleaseAppearance schema.
type ReleaseAppearanceClient struct {
	config
}

// NewReleaseAppearanceClient returns a client for the ReleaseAppearance from the given config.
func NewReleaseAppearanceClient(c config) *ReleaseAppearanceClient {
	return &ReleaseAppearanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `releaseappearance.Hooks(f(g(h())))`.
func (c *ReleaseAppearanceClient) Use(hooks ...Hook) {
	c.hooks.ReleaseAppearance = append(c.hooks.ReleaseAppearance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `releaseappearance.Intercept(f(g(h())))`.
func (c *ReleaseAppearanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReleaseAppearance = append(c.inters.ReleaseAppearance, interceptors...)
}

// Create returns a builder for creating a ReleaseAppearance entity.
func (c *ReleaseAppearanceClient) Create() *ReleaseAppearanceCreate {
	mutation := newReleaseAppearanceMutation(c.config, OpCreate)
	return &ReleaseAppearanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReleaseAppearance entities.
func (c *ReleaseAppearanceClient) CreateBulk(builders ...*ReleaseAppearanceCreate) *ReleaseAppearanceCreateBulk {
	return &ReleaseAppearanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReleaseAppearanceClient) MapCreateBulk(slice any, setFunc func(*ReleaseAppearanceCreate, int)) *ReleaseAppearanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReleaseAppearanceCreateBulk{err: fmt.Errorf("calling to ReleaseAppearanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReleaseAppearanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReleaseAppearanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReleaseAppearance.
func (c *ReleaseAppearanceClient) Update() *ReleaseAppearanceUpdate {
	mutation := newReleaseAppearanceMutation(c.config, OpUpdate)
	return &ReleaseAppearanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReleaseAppearanceClient) UpdateOne(ra *ReleaseAppearance) *ReleaseAppearanceUpdateOne {
	mutation := newReleaseAppearanceMutation(c.config, OpUpdateOne)
	mutation.artist = &ra.ArtistID
	mutation.release = &ra.ReleaseID
	return &ReleaseAppearanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReleaseAppearance.
func (c *ReleaseAppearanceClient) Delete() *ReleaseAppearanceDelete {
	mutation := newReleaseAppearanceMutation(c.config, OpDelete)
	return &ReleaseAppearanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for ReleaseAppearance.
func (c *ReleaseAppearanceClient) Query() *ReleaseAppearanceQuery {
	return &ReleaseAppearanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReleaseAppearance},
		inters: c.Interceptors(),
	}
}

// QueryArtist queries the artist edge of a ReleaseAppearance.
func (c *ReleaseAppearanceClient) QueryArtist(ra *ReleaseAppearance) *ArtistQuery {
	return c.Query().
		Where(releaseappearance.ArtistID(ra.ArtistID), releaseappearance.ReleaseID(ra.ReleaseID)).
		QueryArtist()
}

// QueryRelease queries the release edge of a ReleaseAppearance.
func (c *ReleaseAppearanceClient) QueryRelease(ra *ReleaseAppearance) *ReleaseQuery {
	return c.Query().
		Where(releaseappearance.ArtistID(ra.ArtistID), releaseappearance.ReleaseID(ra.ReleaseID)).
		QueryRelease()
}

// Hooks returns the client hooks.
func (c *ReleaseAppearanceClient) Hooks() []Hook {
	return c.hooks.ReleaseAppearance
}

// Interceptors returns the client interceptors.
func (c *ReleaseAppearanceClient) Interceptors() []Interceptor {
	return c.inters.ReleaseAppearance
}

func (c *ReleaseAppearanceClient) mutate(ctx context.Context, m *ReleaseAppearanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReleaseAppearanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReleaseAppearanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReleaseAppearanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReleaseAppearanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReleaseAppearance mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskClient) MapCreateBulk(slice any, setFunc func(*TaskCreate, int)) *TaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskCreateBulk{err: fmt.Errorf("calling to TaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id pid.ID) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id pid.ID) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id pid.ID) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id pid.ID) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// TrackClient is a client for the Track schema.
type TrackClient struct {
	config
}

// NewTrackClient returns a client for the Track from the given config.
func NewTrackClient(c config) *TrackClient {
	return &TrackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `track.Hooks(f(g(h())))`.
func (c *TrackClient) Use(hooks ...Hook) {
	c.hooks.Track = append(c.hooks.Track, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `track.Intercept(f(g(h())))`.
func (c *TrackClient) Intercept(interceptors ...Interceptor) {
	c.inters.Track = append(c.inters.Track, interceptors...)
}

// Create returns a builder for creating a Track entity.
func (c *TrackClient) Create() *TrackCreate {
	mutation := newTrackMutation(c.config, OpCreate)
	return &TrackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Track entities.
func (c *TrackClient) CreateBulk(builders ...*TrackCreate) *TrackCreateBulk {
	return &TrackCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TrackClient) MapCreateBulk(slice any, setFunc func(*TrackCreate, int)) *TrackCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TrackCreateBulk{err: fmt.Errorf("calling to TrackClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TrackCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TrackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Track.
func (c *TrackClient) Update() *TrackUpdate {
	mutation := newTrackMutation(c.config, OpUpdate)
	return &TrackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrackClient) UpdateOne(t *Track) *TrackUpdateOne {
	mutation := newTrackMutation(c.config, OpUpdateOne, withTrack(t))
	return &TrackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrackClient) UpdateOneID(id pid.ID) *TrackUpdateOne {
	mutation := newTrackMutation(c.config, OpUpdateOne, withTrackID(id))
	return &TrackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Track.
func (c *TrackClient) Delete() *TrackDelete {
	mutation := newTrackMutation(c.config, OpDelete)
	return &TrackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TrackClient) DeleteOne(t *Track) *TrackDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TrackClient) DeleteOneID(id pid.ID) *TrackDeleteOne {
	builder := c.Delete().Where(track.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrackDeleteOne{builder}
}

// Query returns a query builder for Track.
func (c *TrackClient) Query() *TrackQuery {
	return &TrackQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrack},
		inters: c.Interceptors(),
	}
}

// Get returns a Track entity by its id.
func (c *TrackClient) Get(ctx context.Context, id pid.ID) (*Track, error) {
	return c.Query().Where(track.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrackClient) GetX(ctx context.Context, id pid.ID) *Track {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppearingArtists queries the appearing_artists edge of a Track.
func (c *TrackClient) QueryAppearingArtists(t *Track) *ArtistQuery {
	query := (&ArtistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(track.Table, track.FieldID, id),
			sqlgraph.To(artist.Table, artist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, track.AppearingArtistsTable, track.AppearingArtistsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRelease queries the release edge of a Track.
func (c *TrackClient) QueryRelease(t *Track) *ReleaseQuery {
	query := (&ReleaseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(track.Table, track.FieldID, id),
			sqlgraph.To(release.Table, release.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, track.ReleaseTable, track.ReleaseColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppearance queries the appearance edge of a Track.
func (c *TrackClient) QueryAppearance(t *Track) *TrackAppearanceQuery {
	query := (&TrackAppearanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(track.Table, track.FieldID, id),
			sqlgraph.To(trackappearance.Table, trackappearance.TrackColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, track.AppearanceTable, track.AppearanceColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TrackClient) Hooks() []Hook {
	return c.hooks.Track
}

// Interceptors returns the client interceptors.
func (c *TrackClient) Interceptors() []Interceptor {
	return c.inters.Track
}

func (c *TrackClient) mutate(ctx context.Context, m *TrackMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TrackCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TrackUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TrackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TrackDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Track mutation op: %q", m.Op())
	}
}

// TrackAppearanceClient is a client for the TrackAppearance schema.
type TrackAppearanceClient struct {
	config
}

// NewTrackAppearanceClient returns a client for the TrackAppearance from the given config.
func NewTrackAppearanceClient(c config) *TrackAppearanceClient {
	return &TrackAppearanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trackappearance.Hooks(f(g(h())))`.
func (c *TrackAppearanceClient) Use(hooks ...Hook) {
	c.hooks.TrackAppearance = append(c.hooks.TrackAppearance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trackappearance.Intercept(f(g(h())))`.
func (c *TrackAppearanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.TrackAppearance = append(c.inters.TrackAppearance, interceptors...)
}

// Create returns a builder for creating a TrackAppearance entity.
func (c *TrackAppearanceClient) Create() *TrackAppearanceCreate {
	mutation := newTrackAppearanceMutation(c.config, OpCreate)
	return &TrackAppearanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TrackAppearance entities.
func (c *TrackAppearanceClient) CreateBulk(builders ...*TrackAppearanceCreate) *TrackAppearanceCreateBulk {
	return &TrackAppearanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TrackAppearanceClient) MapCreateBulk(slice any, setFunc func(*TrackAppearanceCreate, int)) *TrackAppearanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TrackAppearanceCreateBulk{err: fmt.Errorf("calling to TrackAppearanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TrackAppearanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TrackAppearanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TrackAppearance.
func (c *TrackAppearanceClient) Update() *TrackAppearanceUpdate {
	mutation := newTrackAppearanceMutation(c.config, OpUpdate)
	return &TrackAppearanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrackAppearanceClient) UpdateOne(ta *TrackAppearance) *TrackAppearanceUpdateOne {
	mutation := newTrackAppearanceMutation(c.config, OpUpdateOne)
	mutation.artist = &ta.ArtistID
	mutation.track = &ta.TrackID
	return &TrackAppearanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TrackAppearance.
func (c *TrackAppearanceClient) Delete() *TrackAppearanceDelete {
	mutation := newTrackAppearanceMutation(c.config, OpDelete)
	return &TrackAppearanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for TrackAppearance.
func (c *TrackAppearanceClient) Query() *TrackAppearanceQuery {
	return &TrackAppearanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrackAppearance},
		inters: c.Interceptors(),
	}
}

// QueryArtist queries the artist edge of a TrackAppearance.
func (c *TrackAppearanceClient) QueryArtist(ta *TrackAppearance) *ArtistQuery {
	return c.Query().
		Where(trackappearance.ArtistID(ta.ArtistID), trackappearance.TrackID(ta.TrackID)).
		QueryArtist()
}

// QueryTrack queries the track edge of a TrackAppearance.
func (c *TrackAppearanceClient) QueryTrack(ta *TrackAppearance) *TrackQuery {
	return c.Query().
		Where(trackappearance.ArtistID(ta.ArtistID), trackappearance.TrackID(ta.TrackID)).
		QueryTrack()
}

// Hooks returns the client hooks.
func (c *TrackAppearanceClient) Hooks() []Hook {
	return c.hooks.TrackAppearance
}

// Interceptors returns the client interceptors.
func (c *TrackAppearanceClient) Interceptors() []Interceptor {
	return c.inters.TrackAppearance
}

func (c *TrackAppearanceClient) mutate(ctx context.Context, m *TrackAppearanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TrackAppearanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TrackAppearanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TrackAppearanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TrackAppearanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TrackAppearance mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id pid.ID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id pid.ID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id pid.ID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id pid.ID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryImages queries the images edge of a User.
func (c *UserClient) QueryImages(u *User) *ImageQuery {
	query := (&ImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ImagesTable, user.ImagesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Artist, Image, ImageData, ProcessedImage, Release, ReleaseAppearance, Task,
		Track, TrackAppearance, User []ent.Hook
	}
	inters struct {
		Artist, Image, ImageData, ProcessedImage, Release, ReleaseAppearance, Task,
		Track, TrackAppearance, User []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
