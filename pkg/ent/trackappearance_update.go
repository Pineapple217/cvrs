// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pineapple217/cvrs/pkg/ent/artist"
	"github.com/Pineapple217/cvrs/pkg/ent/predicate"
	"github.com/Pineapple217/cvrs/pkg/ent/track"
	"github.com/Pineapple217/cvrs/pkg/ent/trackappearance"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

// TrackAppearanceUpdate is the builder for updating TrackAppearance entities.
type TrackAppearanceUpdate struct {
	config
	hooks    []Hook
	mutation *TrackAppearanceMutation
}

// Where appends a list predicates to the TrackAppearanceUpdate builder.
func (tau *TrackAppearanceUpdate) Where(ps ...predicate.TrackAppearance) *TrackAppearanceUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetTrackID sets the "track_id" field.
func (tau *TrackAppearanceUpdate) SetTrackID(pi pid.ID) *TrackAppearanceUpdate {
	tau.mutation.SetTrackID(pi)
	return tau
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (tau *TrackAppearanceUpdate) SetNillableTrackID(pi *pid.ID) *TrackAppearanceUpdate {
	if pi != nil {
		tau.SetTrackID(*pi)
	}
	return tau
}

// SetArtistID sets the "artist_id" field.
func (tau *TrackAppearanceUpdate) SetArtistID(pi pid.ID) *TrackAppearanceUpdate {
	tau.mutation.SetArtistID(pi)
	return tau
}

// SetNillableArtistID sets the "artist_id" field if the given value is not nil.
func (tau *TrackAppearanceUpdate) SetNillableArtistID(pi *pid.ID) *TrackAppearanceUpdate {
	if pi != nil {
		tau.SetArtistID(*pi)
	}
	return tau
}

// SetOrder sets the "order" field.
func (tau *TrackAppearanceUpdate) SetOrder(i int) *TrackAppearanceUpdate {
	tau.mutation.ResetOrder()
	tau.mutation.SetOrder(i)
	return tau
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tau *TrackAppearanceUpdate) SetNillableOrder(i *int) *TrackAppearanceUpdate {
	if i != nil {
		tau.SetOrder(*i)
	}
	return tau
}

// AddOrder adds i to the "order" field.
func (tau *TrackAppearanceUpdate) AddOrder(i int) *TrackAppearanceUpdate {
	tau.mutation.AddOrder(i)
	return tau
}

// SetArtist sets the "artist" edge to the Artist entity.
func (tau *TrackAppearanceUpdate) SetArtist(a *Artist) *TrackAppearanceUpdate {
	return tau.SetArtistID(a.ID)
}

// SetTrack sets the "track" edge to the Track entity.
func (tau *TrackAppearanceUpdate) SetTrack(t *Track) *TrackAppearanceUpdate {
	return tau.SetTrackID(t.ID)
}

// Mutation returns the TrackAppearanceMutation object of the builder.
func (tau *TrackAppearanceUpdate) Mutation() *TrackAppearanceMutation {
	return tau.mutation
}

// ClearArtist clears the "artist" edge to the Artist entity.
func (tau *TrackAppearanceUpdate) ClearArtist() *TrackAppearanceUpdate {
	tau.mutation.ClearArtist()
	return tau
}

// ClearTrack clears the "track" edge to the Track entity.
func (tau *TrackAppearanceUpdate) ClearTrack() *TrackAppearanceUpdate {
	tau.mutation.ClearTrack()
	return tau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TrackAppearanceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tau.sqlSave, tau.mutation, tau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TrackAppearanceUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TrackAppearanceUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TrackAppearanceUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tau *TrackAppearanceUpdate) check() error {
	if v, ok := tau.mutation.Order(); ok {
		if err := trackappearance.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "TrackAppearance.order": %w`, err)}
		}
	}
	if tau.mutation.ArtistCleared() && len(tau.mutation.ArtistIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TrackAppearance.artist"`)
	}
	if tau.mutation.TrackCleared() && len(tau.mutation.TrackIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TrackAppearance.track"`)
	}
	return nil
}

func (tau *TrackAppearanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trackappearance.Table, trackappearance.Columns, sqlgraph.NewFieldSpec(trackappearance.FieldArtistID, field.TypeInt64), sqlgraph.NewFieldSpec(trackappearance.FieldTrackID, field.TypeInt64))
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.Order(); ok {
		_spec.SetField(trackappearance.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tau.mutation.AddedOrder(); ok {
		_spec.AddField(trackappearance.FieldOrder, field.TypeInt, value)
	}
	if tau.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.ArtistTable,
			Columns: []string{trackappearance.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.ArtistTable,
			Columns: []string{trackappearance.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tau.mutation.TrackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.TrackTable,
			Columns: []string{trackappearance.TrackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.TrackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.TrackTable,
			Columns: []string{trackappearance.TrackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trackappearance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tau.mutation.done = true
	return n, nil
}

// TrackAppearanceUpdateOne is the builder for updating a single TrackAppearance entity.
type TrackAppearanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrackAppearanceMutation
}

// SetTrackID sets the "track_id" field.
func (tauo *TrackAppearanceUpdateOne) SetTrackID(pi pid.ID) *TrackAppearanceUpdateOne {
	tauo.mutation.SetTrackID(pi)
	return tauo
}

// SetNillableTrackID sets the "track_id" field if the given value is not nil.
func (tauo *TrackAppearanceUpdateOne) SetNillableTrackID(pi *pid.ID) *TrackAppearanceUpdateOne {
	if pi != nil {
		tauo.SetTrackID(*pi)
	}
	return tauo
}

// SetArtistID sets the "artist_id" field.
func (tauo *TrackAppearanceUpdateOne) SetArtistID(pi pid.ID) *TrackAppearanceUpdateOne {
	tauo.mutation.SetArtistID(pi)
	return tauo
}

// SetNillableArtistID sets the "artist_id" field if the given value is not nil.
func (tauo *TrackAppearanceUpdateOne) SetNillableArtistID(pi *pid.ID) *TrackAppearanceUpdateOne {
	if pi != nil {
		tauo.SetArtistID(*pi)
	}
	return tauo
}

// SetOrder sets the "order" field.
func (tauo *TrackAppearanceUpdateOne) SetOrder(i int) *TrackAppearanceUpdateOne {
	tauo.mutation.ResetOrder()
	tauo.mutation.SetOrder(i)
	return tauo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tauo *TrackAppearanceUpdateOne) SetNillableOrder(i *int) *TrackAppearanceUpdateOne {
	if i != nil {
		tauo.SetOrder(*i)
	}
	return tauo
}

// AddOrder adds i to the "order" field.
func (tauo *TrackAppearanceUpdateOne) AddOrder(i int) *TrackAppearanceUpdateOne {
	tauo.mutation.AddOrder(i)
	return tauo
}

// SetArtist sets the "artist" edge to the Artist entity.
func (tauo *TrackAppearanceUpdateOne) SetArtist(a *Artist) *TrackAppearanceUpdateOne {
	return tauo.SetArtistID(a.ID)
}

// SetTrack sets the "track" edge to the Track entity.
func (tauo *TrackAppearanceUpdateOne) SetTrack(t *Track) *TrackAppearanceUpdateOne {
	return tauo.SetTrackID(t.ID)
}

// Mutation returns the TrackAppearanceMutation object of the builder.
func (tauo *TrackAppearanceUpdateOne) Mutation() *TrackAppearanceMutation {
	return tauo.mutation
}

// ClearArtist clears the "artist" edge to the Artist entity.
func (tauo *TrackAppearanceUpdateOne) ClearArtist() *TrackAppearanceUpdateOne {
	tauo.mutation.ClearArtist()
	return tauo
}

// ClearTrack clears the "track" edge to the Track entity.
func (tauo *TrackAppearanceUpdateOne) ClearTrack() *TrackAppearanceUpdateOne {
	tauo.mutation.ClearTrack()
	return tauo
}

// Where appends a list predicates to the TrackAppearanceUpdate builder.
func (tauo *TrackAppearanceUpdateOne) Where(ps ...predicate.TrackAppearance) *TrackAppearanceUpdateOne {
	tauo.mutation.Where(ps...)
	return tauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TrackAppearanceUpdateOne) Select(field string, fields ...string) *TrackAppearanceUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TrackAppearance entity.
func (tauo *TrackAppearanceUpdateOne) Save(ctx context.Context) (*TrackAppearance, error) {
	return withHooks(ctx, tauo.sqlSave, tauo.mutation, tauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TrackAppearanceUpdateOne) SaveX(ctx context.Context) *TrackAppearance {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TrackAppearanceUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TrackAppearanceUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tauo *TrackAppearanceUpdateOne) check() error {
	if v, ok := tauo.mutation.Order(); ok {
		if err := trackappearance.OrderValidator(v); err != nil {
			return &ValidationError{Name: "order", err: fmt.Errorf(`ent: validator failed for field "TrackAppearance.order": %w`, err)}
		}
	}
	if tauo.mutation.ArtistCleared() && len(tauo.mutation.ArtistIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TrackAppearance.artist"`)
	}
	if tauo.mutation.TrackCleared() && len(tauo.mutation.TrackIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TrackAppearance.track"`)
	}
	return nil
}

func (tauo *TrackAppearanceUpdateOne) sqlSave(ctx context.Context) (_node *TrackAppearance, err error) {
	if err := tauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trackappearance.Table, trackappearance.Columns, sqlgraph.NewFieldSpec(trackappearance.FieldArtistID, field.TypeInt64), sqlgraph.NewFieldSpec(trackappearance.FieldTrackID, field.TypeInt64))
	if id, ok := tauo.mutation.ArtistID(); !ok {
		return nil, &ValidationError{Name: "artist_id", err: errors.New(`ent: missing "TrackAppearance.artist_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := tauo.mutation.TrackID(); !ok {
		return nil, &ValidationError{Name: "track_id", err: errors.New(`ent: missing "TrackAppearance.track_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !trackappearance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.Order(); ok {
		_spec.SetField(trackappearance.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tauo.mutation.AddedOrder(); ok {
		_spec.AddField(trackappearance.FieldOrder, field.TypeInt, value)
	}
	if tauo.mutation.ArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.ArtistTable,
			Columns: []string{trackappearance.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.ArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.ArtistTable,
			Columns: []string{trackappearance.ArtistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artist.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tauo.mutation.TrackCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.TrackTable,
			Columns: []string{trackappearance.TrackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.TrackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trackappearance.TrackTable,
			Columns: []string{trackappearance.TrackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(track.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TrackAppearance{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trackappearance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tauo.mutation.done = true
	return _node, nil
}
