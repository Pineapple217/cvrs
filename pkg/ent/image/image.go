// Code generated by ent, DO NOT EDIT.

package image

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pineapple217/cvrs/pkg/pid"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFile holds the string denoting the file field in the database.
	FieldFile = "file"
	// FieldOriginalName holds the string denoting the original_name field in the database.
	FieldOriginalName = "original_name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldDimentionWidth holds the string denoting the dimention_width field in the database.
	FieldDimentionWidth = "dimention_width"
	// FieldDimentionHeight holds the string denoting the dimention_height field in the database.
	FieldDimentionHeight = "dimention_height"
	// FieldSizeBits holds the string denoting the size_bits field in the database.
	FieldSizeBits = "size_bits"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// EdgeArtist holds the string denoting the artist edge name in mutations.
	EdgeArtist = "artist"
	// EdgeUploader holds the string denoting the uploader edge name in mutations.
	EdgeUploader = "uploader"
	// EdgeProccesedImage holds the string denoting the proccesed_image edge name in mutations.
	EdgeProccesedImage = "proccesed_image"
	// Table holds the table name of the image in the database.
	Table = "images"
	// ReleaseTable is the table that holds the release relation/edge.
	ReleaseTable = "images"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "releases"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "release_image"
	// ArtistTable is the table that holds the artist relation/edge.
	ArtistTable = "images"
	// ArtistInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	ArtistInverseTable = "artists"
	// ArtistColumn is the table column denoting the artist relation/edge.
	ArtistColumn = "artist_image"
	// UploaderTable is the table that holds the uploader relation/edge.
	UploaderTable = "images"
	// UploaderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UploaderInverseTable = "users"
	// UploaderColumn is the table column denoting the uploader relation/edge.
	UploaderColumn = "user_images"
	// ProccesedImageTable is the table that holds the proccesed_image relation/edge.
	ProccesedImageTable = "processed_images"
	// ProccesedImageInverseTable is the table name for the ProcessedImage entity.
	// It exists in this package in order to avoid circular dependency with the "processedimage" package.
	ProccesedImageInverseTable = "processed_images"
	// ProccesedImageColumn is the table column denoting the proccesed_image relation/edge.
	ProccesedImageColumn = "image_proccesed_image"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldFile,
	FieldOriginalName,
	FieldType,
	FieldNote,
	FieldDimentionWidth,
	FieldDimentionHeight,
	FieldSizeBits,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "images"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"artist_image",
	"release_image",
	"user_images",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/Pineapple217/cvrs/pkg/ent/runtime"
var (
	Hooks [1]ent.Hook
	// FileValidator is a validator for the "file" field. It is called by the builders before save.
	FileValidator func(string) error
	// OriginalNameValidator is a validator for the "original_name" field. It is called by the builders before save.
	OriginalNameValidator func(string) error
	// DimentionWidthValidator is a validator for the "dimention_width" field. It is called by the builders before save.
	DimentionWidthValidator func(int) error
	// DimentionHeightValidator is a validator for the "dimention_height" field. It is called by the builders before save.
	DimentionHeightValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pid.ID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeWEBP Type = "WEBP"
	TypePNG  Type = "PNG"
	TypeJPG  Type = "JPG"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeWEBP, TypePNG, TypeJPG:
		return nil
	default:
		return fmt.Errorf("image: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFile orders the results by the file field.
func ByFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFile, opts...).ToFunc()
}

// ByOriginalName orders the results by the original_name field.
func ByOriginalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByDimentionWidth orders the results by the dimention_width field.
func ByDimentionWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDimentionWidth, opts...).ToFunc()
}

// ByDimentionHeight orders the results by the dimention_height field.
func ByDimentionHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDimentionHeight, opts...).ToFunc()
}

// BySizeBits orders the results by the size_bits field.
func BySizeBits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeBits, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByReleaseField orders the results by release field.
func ByReleaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReleaseStep(), sql.OrderByField(field, opts...))
	}
}

// ByArtistField orders the results by artist field.
func ByArtistField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtistStep(), sql.OrderByField(field, opts...))
	}
}

// ByUploaderField orders the results by uploader field.
func ByUploaderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUploaderStep(), sql.OrderByField(field, opts...))
	}
}

// ByProccesedImageCount orders the results by proccesed_image count.
func ByProccesedImageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProccesedImageStep(), opts...)
	}
}

// ByProccesedImage orders the results by proccesed_image terms.
func ByProccesedImage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProccesedImageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newReleaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReleaseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ReleaseTable, ReleaseColumn),
	)
}
func newArtistStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtistInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ArtistTable, ArtistColumn),
	)
}
func newUploaderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UploaderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UploaderTable, UploaderColumn),
	)
}
func newProccesedImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProccesedImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProccesedImageTable, ProccesedImageColumn),
	)
}
